node {
  name: "gru_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "gru_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2866910994052887
      }
    }
  }
}
node {
  name: "gru_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2866910994052887
      }
    }
  }
}
node {
  name: "gru_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "gru_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "gru_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "gru_cell/kernel/Initializer/random_uniform/max"
  input: "gru_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
}
node {
  name: "gru_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "gru_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "gru_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
}
node {
  name: "gru_cell/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "gru_cell/kernel/Initializer/random_uniform/mul"
  input: "gru_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
}
node {
  name: "gru_cell/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "gru_cell/kernel"
    }
  }
}
node {
  name: "gru_cell/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru_cell/kernel"
}
node {
  name: "gru_cell/kernel/Assign"
  op: "AssignVariableOp"
  input: "gru_cell/kernel"
  input: "gru_cell/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "gru_cell/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru_cell/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "gru_cell/recurrent_kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "gru_cell/recurrent_kernel/Initializer/random_normal/RandomStandardNormal"
  input: "gru_cell/recurrent_kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/random_normal"
  op: "AddV2"
  input: "gru_cell/recurrent_kernel/Initializer/random_normal/mul"
  input: "gru_cell/recurrent_kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/Qr"
  op: "Qr"
  input: "gru_cell/recurrent_kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "full_matrices"
    value {
      b: false
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/DiagPart"
  op: "DiagPart"
  input: "gru_cell/recurrent_kernel/Initializer/Qr:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/Sign"
  op: "Sign"
  input: "gru_cell/recurrent_kernel/Initializer/DiagPart"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/mul"
  op: "Mul"
  input: "gru_cell/recurrent_kernel/Initializer/Qr"
  input: "gru_cell/recurrent_kernel/Initializer/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose"
  op: "Transpose"
  input: "gru_cell/recurrent_kernel/Initializer/mul"
  input: "gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/Reshape"
  op: "Reshape"
  input: "gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose"
  input: "gru_cell/recurrent_kernel/Initializer/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/mul_1/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Initializer/mul_1"
  op: "Mul"
  input: "gru_cell/recurrent_kernel/Initializer/mul_1/x"
  input: "gru_cell/recurrent_kernel/Initializer/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "gru_cell/recurrent_kernel"
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru_cell/recurrent_kernel"
}
node {
  name: "gru_cell/recurrent_kernel/Assign"
  op: "AssignVariableOp"
  input: "gru_cell/recurrent_kernel"
  input: "gru_cell/recurrent_kernel/Initializer/mul_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "gru_cell/recurrent_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru_cell/recurrent_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gru_cell/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "gru_cell/bias"
    }
  }
}
node {
  name: "gru_cell/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru_cell/bias"
}
node {
  name: "gru_cell/bias/Assign"
  op: "AssignVariableOp"
  input: "gru_cell/bias"
  input: "gru_cell/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "gru_cell/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru_cell/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5345224738121033
      }
    }
  }
}
node {
  name: "kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5345224738121033
      }
    }
  }
}
node {
  name: "kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "kernel/Initializer/random_uniform/max"
  input: "kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
}
node {
  name: "kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "kernel/Initializer/random_uniform/RandomUniform"
  input: "kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
}
node {
  name: "kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "kernel/Initializer/random_uniform/mul"
  input: "kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
}
node {
  name: "kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "kernel"
    }
  }
}
node {
  name: "kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "kernel"
}
node {
  name: "kernel/Assign"
  op: "AssignVariableOp"
  input: "kernel"
  input: "kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "bias"
    }
  }
}
node {
  name: "bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "bias"
}
node {
  name: "bias/Assign"
  op: "AssignVariableOp"
  input: "bias"
  input: "bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total"
    }
  }
}
node {
  name: "total/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "total/Assign"
  op: "AssignVariableOp"
  input: "total"
  input: "total/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "total/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count"
    }
  }
}
node {
  name: "count/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "count/Assign"
  op: "AssignVariableOp"
  input: "count"
  input: "count/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "count/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_1"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total_1"
    }
  }
}
node {
  name: "total_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total_1"
}
node {
  name: "total_1/Assign"
  op: "AssignVariableOp"
  input: "total_1"
  input: "total_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "total_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_1"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count_1"
    }
  }
}
node {
  name: "count_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_1"
}
node {
  name: "count_1/Assign"
  op: "AssignVariableOp"
  input: "count_1"
  input: "count_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "count_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel/rms/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/rms"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/kernel/rms"
    }
  }
}
node {
  name: "dense/kernel/rms/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/kernel/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/rms/Assign"
  op: "AssignVariableOp"
  input: "dense/kernel/rms"
  input: "dense/kernel/rms/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "dense/kernel/rms/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/rms/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/rms"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/bias/rms"
    }
  }
}
node {
  name: "dense/bias/rms/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/bias/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bias"
      }
    }
  }
}
node {
  name: "dense/bias/rms/Assign"
  op: "AssignVariableOp"
  input: "dense/bias/rms"
  input: "dense/bias/rms/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "dense/bias/rms/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/kernel/rms/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/gru_cell/kernel/rms"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "net/gru_cell/kernel/rms"
    }
  }
}
node {
  name: "net/gru_cell/kernel/rms/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "net/gru_cell/kernel/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
}
node {
  name: "net/gru_cell/kernel/rms/Assign"
  op: "AssignVariableOp"
  input: "net/gru_cell/kernel/rms"
  input: "net/gru_cell/kernel/rms/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/kernel/rms/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "net/gru_cell/kernel/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/recurrent_kernel/rms/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/recurrent_kernel/rms/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/gru_cell/recurrent_kernel/rms/Initializer/zeros"
  op: "Fill"
  input: "net/gru_cell/recurrent_kernel/rms/Initializer/zeros/shape_as_tensor"
  input: "net/gru_cell/recurrent_kernel/rms/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/gru_cell/recurrent_kernel/rms"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "net/gru_cell/recurrent_kernel/rms"
    }
  }
}
node {
  name: "net/gru_cell/recurrent_kernel/rms/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "net/gru_cell/recurrent_kernel/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "net/gru_cell/recurrent_kernel/rms/Assign"
  op: "AssignVariableOp"
  input: "net/gru_cell/recurrent_kernel/rms"
  input: "net/gru_cell/recurrent_kernel/rms/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/recurrent_kernel/rms/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "net/gru_cell/recurrent_kernel/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VarHandleOp"
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "RMSprop/rho"
    }
  }
}
node {
  name: "RMSprop/rho/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "RMSprop/rho"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/momentum"
  op: "VarHandleOp"
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "RMSprop/momentum"
    }
  }
}
node {
  name: "RMSprop/momentum/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "RMSprop/momentum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "RMSprop/learning_rate"
    }
  }
}
node {
  name: "RMSprop/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "RMSprop/learning_rate"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VarHandleOp"
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "RMSprop/decay"
    }
  }
}
node {
  name: "RMSprop/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "RMSprop/decay"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/iter"
  op: "VarHandleOp"
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "RMSprop/iter"
    }
  }
}
node {
  name: "RMSprop/iter/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "RMSprop/iter"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "net/gru_cell/bias/rms/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/gru_cell/bias/rms"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "net/gru_cell/bias/rms"
    }
  }
}
node {
  name: "net/gru_cell/bias/rms/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "net/gru_cell/bias/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/bias"
      }
    }
  }
}
node {
  name: "net/gru_cell/bias/rms/Assign"
  op: "AssignVariableOp"
  input: "net/gru_cell/bias/rms"
  input: "net/gru_cell/bias/rms/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/bias/rms/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "net/gru_cell/bias/rms"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Model_Dobo.net/variables/variables"
      }
    }
  }
}
node {
  name: "RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 19
          }
        }
        string_val: "keras_api/metrics/0/count/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "keras_api/metrics/0/total/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "keras_api/metrics/1/count/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "keras_api/metrics/1/total/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "optimizer/rho/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "variables/0/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "variables/0/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "variables/1/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "variables/1/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "variables/2/.ATTRIBUTES/VARIABLE_VALUE"
        string_val: "variables/2/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
      }
    }
  }
}
node {
  name: "RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 19
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "RestoreV2"
  op: "RestoreV2"
  input: "Const"
  input: "RestoreV2/tensor_names"
  input: "RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "RestoreV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp"
  op: "AssignVariableOp"
  input: "count"
  input: "Identity"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_1"
  op: "Identity"
  input: "RestoreV2:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "total"
  input: "Identity_1"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_2"
  op: "Identity"
  input: "RestoreV2:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "count_1"
  input: "Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_3"
  op: "Identity"
  input: "RestoreV2:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "total_1"
  input: "Identity_3"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_4"
  op: "Identity"
  input: "RestoreV2:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "bias"
  input: "Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_5"
  op: "Identity"
  input: "RestoreV2:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dense/bias/rms"
  input: "Identity_5"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_6"
  op: "Identity"
  input: "RestoreV2:6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "kernel"
  input: "Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_7"
  op: "Identity"
  input: "RestoreV2:7"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "dense/kernel/rms"
  input: "Identity_7"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_8"
  op: "Identity"
  input: "RestoreV2:8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "RMSprop/decay"
  input: "Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_9"
  op: "Identity"
  input: "RestoreV2:9"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "RMSprop/iter"
  input: "Identity_9"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_10"
  op: "Identity"
  input: "RestoreV2:10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "RMSprop/learning_rate"
  input: "Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_11"
  op: "Identity"
  input: "RestoreV2:11"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "RMSprop/momentum"
  input: "Identity_11"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_12"
  op: "Identity"
  input: "RestoreV2:12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "RMSprop/rho"
  input: "Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_13"
  op: "Identity"
  input: "RestoreV2:13"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "gru_cell/kernel"
  input: "Identity_13"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_14"
  op: "Identity"
  input: "RestoreV2:14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "net/gru_cell/kernel/rms"
  input: "Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_15"
  op: "Identity"
  input: "RestoreV2:15"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "gru_cell/recurrent_kernel"
  input: "Identity_15"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_16"
  op: "Identity"
  input: "RestoreV2:16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "net/gru_cell/recurrent_kernel/rms"
  input: "Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_17"
  op: "Identity"
  input: "RestoreV2:17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "gru_cell/bias"
  input: "Identity_17"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "Identity_18"
  op: "Identity"
  input: "RestoreV2:18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "net/gru_cell/bias/rms"
  input: "Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "net_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 29
        }
        dim {
          size: 13
        }
      }
    }
  }
}
node {
  name: "net/Shape"
  op: "Shape"
  input: "net_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice"
  op: "StridedSlice"
  input: "net/Shape"
  input: "net/strided_slice/stack"
  input: "net/strided_slice/stack_1"
  input: "net/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/zeros/packed/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/zeros/packed"
  op: "Pack"
  input: "net/strided_slice"
  input: "net/zeros/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "net/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/zeros"
  op: "Fill"
  input: "net/zeros/packed"
  input: "net/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose"
  op: "Transpose"
  input: "net_input"
  input: "net/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/Shape_1"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_1"
  op: "StridedSlice"
  input: "net/Shape_1"
  input: "net/strided_slice_1/stack"
  input: "net/strided_slice_1/stack_1"
  input: "net/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/TensorArray"
  op: "TensorArrayV3"
  input: "net/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta_0"
    }
  }
}
node {
  name: "net/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "net/TensorArrayUnstack/Shape"
  input: "net/TensorArrayUnstack/strided_slice/stack"
  input: "net/TensorArrayUnstack/strided_slice/stack_1"
  input: "net/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range"
  op: "Range"
  input: "net/TensorArrayUnstack/range/start"
  input: "net/TensorArrayUnstack/strided_slice"
  input: "net/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "net/TensorArray"
  input: "net/TensorArrayUnstack/range"
  input: "net/transpose"
  input: "net/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/transpose"
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_2"
  op: "StridedSlice"
  input: "net/transpose"
  input: "net/strided_slice_2/stack"
  input: "net/strided_slice_2/stack_1"
  input: "net/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/gru_cell/ones_like/Shape"
  op: "Shape"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/gru_cell/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/gru_cell/ones_like"
  op: "Fill"
  input: "net/gru_cell/ones_like/Shape"
  input: "net/gru_cell/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/gru_cell/mul"
  op: "Mul"
  input: "net/strided_slice_2"
  input: "net/gru_cell/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/mul_1"
  op: "Mul"
  input: "net/strided_slice_2"
  input: "net/gru_cell/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/mul_2"
  op: "Mul"
  input: "net/strided_slice_2"
  input: "net/gru_cell/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru_cell/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp"
  input: "net/gru_cell/strided_slice/stack"
  input: "net/gru_cell/strided_slice/stack_1"
  input: "net/gru_cell/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/MatMul"
  op: "MatMul"
  input: "net/gru_cell/mul"
  input: "net/gru_cell/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "gru_cell/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_1"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_1"
  input: "net/gru_cell/strided_slice_1/stack"
  input: "net/gru_cell/strided_slice_1/stack_1"
  input: "net/gru_cell/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/MatMul_1"
  op: "MatMul"
  input: "net/gru_cell/mul_1"
  input: "net/gru_cell/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "gru_cell/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_2"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_2"
  input: "net/gru_cell/strided_slice_2/stack"
  input: "net/gru_cell/strided_slice_2/stack_1"
  input: "net/gru_cell/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/MatMul_2"
  op: "MatMul"
  input: "net/gru_cell/mul_2"
  input: "net/gru_cell/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "gru_cell/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_3"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_3"
  input: "net/gru_cell/strided_slice_3/stack"
  input: "net/gru_cell/strided_slice_3/stack_1"
  input: "net/gru_cell/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "net/gru_cell/MatMul"
  input: "net/gru_cell/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "gru_cell/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_4"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_4"
  input: "net/gru_cell/strided_slice_4/stack"
  input: "net/gru_cell/strided_slice_4/stack_1"
  input: "net/gru_cell/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "net/gru_cell/MatMul_1"
  input: "net/gru_cell/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "gru_cell/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_5"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_5"
  input: "net/gru_cell/strided_slice_5/stack"
  input: "net/gru_cell/strided_slice_5/stack_1"
  input: "net/gru_cell/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/BiasAdd_2"
  op: "BiasAdd"
  input: "net/gru_cell/MatMul_2"
  input: "net/gru_cell/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "gru_cell/recurrent_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_6"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_6"
  input: "net/gru_cell/strided_slice_6/stack"
  input: "net/gru_cell/strided_slice_6/stack_1"
  input: "net/gru_cell/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/MatMul_3"
  op: "MatMul"
  input: "net/zeros"
  input: "net/gru_cell/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "gru_cell/recurrent_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_7"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_7"
  input: "net/gru_cell/strided_slice_7/stack"
  input: "net/gru_cell/strided_slice_7/stack_1"
  input: "net/gru_cell/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/MatMul_4"
  op: "MatMul"
  input: "net/zeros"
  input: "net/gru_cell/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/add"
  op: "AddV2"
  input: "net/gru_cell/BiasAdd"
  input: "net/gru_cell/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "net/gru_cell/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/gru_cell/Mul_3"
  op: "Mul"
  input: "net/gru_cell/add"
  input: "net/gru_cell/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/Add_1"
  op: "AddV2"
  input: "net/gru_cell/Mul_3"
  input: "net/gru_cell/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/gru_cell/Add_1"
  input: "net/gru_cell/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value"
  op: "Maximum"
  input: "net/gru_cell/clip_by_value/Minimum"
  input: "net/gru_cell/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/add_2"
  op: "AddV2"
  input: "net/gru_cell/BiasAdd_1"
  input: "net/gru_cell/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "net/gru_cell/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/gru_cell/Mul_4"
  op: "Mul"
  input: "net/gru_cell/add_2"
  input: "net/gru_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/Add_3"
  op: "AddV2"
  input: "net/gru_cell/Mul_4"
  input: "net/gru_cell/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/gru_cell/Add_3"
  input: "net/gru_cell/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/gru_cell/clip_by_value_1"
  op: "Maximum"
  input: "net/gru_cell/clip_by_value_1/Minimum"
  input: "net/gru_cell/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/mul_5"
  op: "Mul"
  input: "net/gru_cell/clip_by_value_1"
  input: "net/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/ReadVariableOp_8"
  op: "ReadVariableOp"
  input: "gru_cell/recurrent_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/gru_cell/strided_slice_8"
  op: "StridedSlice"
  input: "net/gru_cell/ReadVariableOp_8"
  input: "net/gru_cell/strided_slice_8/stack"
  input: "net/gru_cell/strided_slice_8/stack_1"
  input: "net/gru_cell/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/gru_cell/MatMul_5"
  op: "MatMul"
  input: "net/gru_cell/mul_5"
  input: "net/gru_cell/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/gru_cell/add_4"
  op: "AddV2"
  input: "net/gru_cell/BiasAdd_2"
  input: "net/gru_cell/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/mul_6"
  op: "Mul"
  input: "net/gru_cell/clip_by_value"
  input: "net/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/gru_cell/sub"
  op: "Sub"
  input: "net/gru_cell/sub/x"
  input: "net/gru_cell/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/mul_7"
  op: "Mul"
  input: "net/gru_cell/sub"
  input: "net/gru_cell/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/gru_cell/add_5"
  op: "AddV2"
  input: "net/gru_cell/mul_6"
  input: "net/gru_cell/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArray_1"
  op: "TensorArrayV3"
  input: "net/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta_0"
    }
  }
}
node {
  name: "net/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/Enter"
  op: "Enter"
  input: "net/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_1"
  op: "Enter"
  input: "net/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_2"
  op: "Enter"
  input: "net/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Merge"
  op: "Merge"
  input: "net/while/Enter"
  input: "net/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Merge_1"
  op: "Merge"
  input: "net/while/Enter_1"
  input: "net/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Merge_2"
  op: "Merge"
  input: "net/while/Enter_2"
  input: "net/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Less"
  op: "Less"
  input: "net/while/Merge"
  input: "net/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Less/Enter"
  op: "Enter"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/LoopCond"
  op: "LoopCond"
  input: "net/while/Less"
}
node {
  name: "net/while/Switch"
  op: "Switch"
  input: "net/while/Merge"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge"
      }
    }
  }
}
node {
  name: "net/while/Switch_1"
  op: "Switch"
  input: "net/while/Merge_1"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_1"
      }
    }
  }
}
node {
  name: "net/while/Switch_2"
  op: "Switch"
  input: "net/while/Merge_2"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "net/while/Identity"
  op: "Identity"
  input: "net/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Identity_1"
  op: "Identity"
  input: "net/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Identity_2"
  op: "Identity"
  input: "net/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "net/while/TensorArrayReadV3/Enter"
  input: "net/while/Identity"
  input: "net/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "net/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/gru_cell/mul"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/gru_cell/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/mul/Enter"
  op: "Enter"
  input: "net/gru_cell/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/gru_cell/mul_1"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/gru_cell/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/mul_2"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/gru_cell/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp/Enter"
  op: "Enter"
  input: "gru_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp"
  input: "net/while/gru_cell/strided_slice/stack"
  input: "net/while/gru_cell/strided_slice/stack_1"
  input: "net/while/gru_cell/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/MatMul"
  op: "MatMul"
  input: "net/while/gru_cell/mul"
  input: "net/while/gru_cell/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_1/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_1/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_1/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_1"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_1"
  input: "net/while/gru_cell/strided_slice_1/stack"
  input: "net/while/gru_cell/strided_slice_1/stack_1"
  input: "net/while/gru_cell/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/MatMul_1"
  op: "MatMul"
  input: "net/while/gru_cell/mul_1"
  input: "net/while/gru_cell/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_2/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_2/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_2/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_2"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_2"
  input: "net/while/gru_cell/strided_slice_2/stack"
  input: "net/while/gru_cell/strided_slice_2/stack_1"
  input: "net/while/gru_cell/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/MatMul_2"
  op: "MatMul"
  input: "net/while/gru_cell/mul_2"
  input: "net/while/gru_cell/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp_3/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_3/Enter"
  op: "Enter"
  input: "gru_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_3/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_3/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_3/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_3"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_3"
  input: "net/while/gru_cell/strided_slice_3/stack"
  input: "net/while/gru_cell/strided_slice_3/stack_1"
  input: "net/while/gru_cell/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "net/while/gru_cell/MatMul"
  input: "net/while/gru_cell/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp_3/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_4/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_4/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_4/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_4"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_4"
  input: "net/while/gru_cell/strided_slice_4/stack"
  input: "net/while/gru_cell/strided_slice_4/stack_1"
  input: "net/while/gru_cell/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "net/while/gru_cell/MatMul_1"
  input: "net/while/gru_cell/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp_3/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_5/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_5/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_5/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_5"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_5"
  input: "net/while/gru_cell/strided_slice_5/stack"
  input: "net/while/gru_cell/strided_slice_5/stack_1"
  input: "net/while/gru_cell/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/BiasAdd_2"
  op: "BiasAdd"
  input: "net/while/gru_cell/MatMul_2"
  input: "net/while/gru_cell/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp_6/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_6/Enter"
  op: "Enter"
  input: "gru_cell/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_6/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_6/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_6/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_6"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_6"
  input: "net/while/gru_cell/strided_slice_6/stack"
  input: "net/while/gru_cell/strided_slice_6/stack_1"
  input: "net/while/gru_cell/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/MatMul_3"
  op: "MatMul"
  input: "net/while/Identity_2"
  input: "net/while/gru_cell/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_7"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp_6/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_7/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_7/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_7/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_7"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_7"
  input: "net/while/gru_cell/strided_slice_7/stack"
  input: "net/while/gru_cell/strided_slice_7/stack_1"
  input: "net/while/gru_cell/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/MatMul_4"
  op: "MatMul"
  input: "net/while/Identity_2"
  input: "net/while/gru_cell/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/gru_cell/add"
  op: "AddV2"
  input: "net/while/gru_cell/BiasAdd"
  input: "net/while/gru_cell/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/Const"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "net/while/gru_cell/Const_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/gru_cell/Mul_3"
  op: "Mul"
  input: "net/while/gru_cell/add"
  input: "net/while/gru_cell/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/Add_1"
  op: "AddV2"
  input: "net/while/gru_cell/Mul_3"
  input: "net/while/gru_cell/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value/Minimum/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/while/gru_cell/Add_1"
  input: "net/while/gru_cell/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value"
  op: "Maximum"
  input: "net/while/gru_cell/clip_by_value/Minimum"
  input: "net/while/gru_cell/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/add_2"
  op: "AddV2"
  input: "net/while/gru_cell/BiasAdd_1"
  input: "net/while/gru_cell/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/Const_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "net/while/gru_cell/Const_3"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/gru_cell/Mul_4"
  op: "Mul"
  input: "net/while/gru_cell/add_2"
  input: "net/while/gru_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/Add_3"
  op: "AddV2"
  input: "net/while/gru_cell/Mul_4"
  input: "net/while/gru_cell/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value_1/Minimum/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/while/gru_cell/Add_3"
  input: "net/while/gru_cell/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value_1/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/gru_cell/clip_by_value_1"
  op: "Maximum"
  input: "net/while/gru_cell/clip_by_value_1/Minimum"
  input: "net/while/gru_cell/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/mul_5"
  op: "Mul"
  input: "net/while/gru_cell/clip_by_value_1"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/ReadVariableOp_8"
  op: "ReadVariableOp"
  input: "net/while/gru_cell/ReadVariableOp_6/Enter"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_8/stack"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_8/stack_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_8/stack_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/while/gru_cell/strided_slice_8"
  op: "StridedSlice"
  input: "net/while/gru_cell/ReadVariableOp_8"
  input: "net/while/gru_cell/strided_slice_8/stack"
  input: "net/while/gru_cell/strided_slice_8/stack_1"
  input: "net/while/gru_cell/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/while/gru_cell/MatMul_5"
  op: "MatMul"
  input: "net/while/gru_cell/mul_5"
  input: "net/while/gru_cell/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/gru_cell/add_4"
  op: "AddV2"
  input: "net/while/gru_cell/BiasAdd_2"
  input: "net/while/gru_cell/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/mul_6"
  op: "Mul"
  input: "net/while/gru_cell/clip_by_value"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/sub/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/gru_cell/sub"
  op: "Sub"
  input: "net/while/gru_cell/sub/x"
  input: "net/while/gru_cell/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/mul_7"
  op: "Mul"
  input: "net/while/gru_cell/sub"
  input: "net/while/gru_cell/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/gru_cell/add_5"
  op: "AddV2"
  input: "net/while/gru_cell/mul_6"
  input: "net/while/gru_cell/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "net/while/Identity"
  input: "net/while/gru_cell/add_5"
  input: "net/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/gru_cell/add_5"
      }
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "net/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/gru_cell/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/add"
  op: "AddV2"
  input: "net/while/Identity"
  input: "net/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration"
  op: "NextIteration"
  input: "net/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration_1"
  op: "NextIteration"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/NextIteration_2"
  op: "NextIteration"
  input: "net/while/gru_cell/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit"
  op: "Exit"
  input: "net/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Exit_1"
  op: "Exit"
  input: "net/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit_2"
  op: "Exit"
  input: "net/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range"
  op: "Range"
  input: "net/TensorArrayStack/range/start"
  input: "net/strided_slice_1"
  input: "net/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray_1"
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "net/TensorArray_1"
  input: "net/TensorArrayStack/range"
  input: "net/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_3"
  op: "StridedSlice"
  input: "net/TensorArrayStack/TensorArrayGatherV3"
  input: "net/strided_slice_3/stack"
  input: "net/strided_slice_3/stack_1"
  input: "net/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose_1"
  op: "Transpose"
  input: "net/TensorArrayStack/TensorArrayGatherV3"
  input: "net/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "net/strided_slice_3"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Sigmoid"
  op: "Sigmoid"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_2/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_2"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total_2"
    }
  }
}
node {
  name: "total_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total_2"
}
node {
  name: "total_2/Assign"
  op: "AssignVariableOp"
  input: "total_2"
  input: "total_2/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "total_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count_2/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count_2"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count_2"
    }
  }
}
node {
  name: "count_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count_2"
}
node {
  name: "count_2/Assign"
  op: "AssignVariableOp"
  input: "count_2"
  input: "count_2/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "count_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "metrics/accuracy/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "metrics/accuracy/Greater"
  op: "Greater"
  input: "dense/Sigmoid"
  input: "metrics/accuracy/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Cast_1"
  op: "Cast"
  input: "metrics/accuracy/Greater"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Equal"
  op: "Equal"
  input: "dense_target"
  input: "metrics/accuracy/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/accuracy/Cast_2"
  op: "Cast"
  input: "metrics/accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/Mean"
  op: "Mean"
  input: "metrics/accuracy/Cast_2"
  input: "metrics/accuracy/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/accuracy/Sum"
  op: "Sum"
  input: "metrics/accuracy/Mean"
  input: "metrics/accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total_2"
  input: "metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_2"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Size"
  op: "Size"
  input: "metrics/accuracy/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/accuracy/Cast_3"
  op: "Cast"
  input: "metrics/accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count_2"
  input: "metrics/accuracy/Cast_3"
  input: "^metrics/accuracy/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count_2"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total_2"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count_2"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan"
  op: "DivNoNan"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Identity"
  op: "Identity"
  input: "metrics/accuracy/div_no_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_loss/add"
  op: "AddV2"
  input: "loss/dense_loss/add/x"
  input: "dense_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/Neg"
  op: "Neg"
  input: "loss/dense_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_loss/add_1"
  op: "AddV2"
  input: "loss/dense_loss/add_1/x"
  input: "dense/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_loss/add_2"
  op: "AddV2"
  input: "loss/dense_loss/add_1"
  input: "loss/dense_loss/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/Log"
  op: "Log"
  input: "loss/dense_loss/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/mul"
  op: "Mul"
  input: "loss/dense_loss/Neg"
  input: "loss/dense_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_loss/sub"
  op: "Sub"
  input: "loss/dense_loss/sub/x"
  input: "dense_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/Neg_1"
  op: "Neg"
  input: "loss/dense_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_loss/sub_1"
  op: "Sub"
  input: "loss/dense_loss/sub_1/x"
  input: "dense/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_loss/add_3"
  op: "AddV2"
  input: "loss/dense_loss/sub_1"
  input: "loss/dense_loss/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/Log_1"
  op: "Log"
  input: "loss/dense_loss/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/mul_1"
  op: "Mul"
  input: "loss/dense_loss/Neg_1"
  input: "loss/dense_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_loss/Mean"
  op: "Mean"
  input: "loss/dense_loss/mul_1"
  input: "loss/dense_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_loss/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "loss/dense_loss/mul_2"
  op: "Mul"
  input: "loss/dense_loss/mul_2/x"
  input: "loss/dense_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_loss/mul"
  input: "loss/dense_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_loss/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "loss/dense_loss/mul_3"
  op: "Mul"
  input: "loss/dense_loss/mul_3/x"
  input: "loss/dense_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/add_4"
  op: "AddV2"
  input: "loss/dense_loss/mul_2"
  input: "loss/dense_loss/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_loss/weighted_loss/Mul"
  op: "Mul"
  input: "loss/dense_loss/add_4"
  input: "loss/dense_loss/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_loss/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_loss/range"
  op: "Range"
  input: "loss/dense_loss/range/start"
  input: "loss/dense_loss/Rank"
  input: "loss/dense_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_loss/Sum"
  op: "Sum"
  input: "loss/dense_loss/weighted_loss/Mul"
  input: "loss/dense_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_loss/num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/dense_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_loss/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_loss/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_loss/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_loss/range_1"
  op: "Range"
  input: "loss/dense_loss/range_1/start"
  input: "loss/dense_loss/Rank_1"
  input: "loss/dense_loss/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_loss/Sum"
  input: "loss/dense_loss/range_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_loss/value"
  op: "DivNoNan"
  input: "loss/dense_loss/Sum_1"
  input: "loss/dense_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru_cell/bias"
}
node {
  name: "VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "bias"
}
node {
  name: "VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "kernel"
}
node {
  name: "VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "count_1"
}
node {
  name: "VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dense/bias/rms"
}
node {
  name: "VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "net/gru_cell/recurrent_kernel/rms"
}
node {
  name: "VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "total_2"
}
node {
  name: "VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "count_2"
}
node {
  name: "VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "gru_cell/kernel"
}
node {
  name: "VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "gru_cell/recurrent_kernel"
}
node {
  name: "VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "total_1"
}
node {
  name: "VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "dense/kernel/rms"
}
node {
  name: "VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "net/gru_cell/kernel/rms"
}
node {
  name: "VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "net/gru_cell/bias/rms"
}
node {
  name: "init/NoOp"
  op: "NoOp"
  input: "^count_2/Assign"
  input: "^total_2/Assign"
}
node {
  name: "init/NoOp_1"
  op: "NoOp"
  input: "^AssignVariableOp"
  input: "^AssignVariableOp_1"
  input: "^AssignVariableOp_13"
  input: "^AssignVariableOp_14"
  input: "^AssignVariableOp_15"
  input: "^AssignVariableOp_16"
  input: "^AssignVariableOp_17"
  input: "^AssignVariableOp_18"
  input: "^AssignVariableOp_2"
  input: "^AssignVariableOp_3"
  input: "^AssignVariableOp_4"
  input: "^AssignVariableOp_5"
  input: "^AssignVariableOp_6"
  input: "^AssignVariableOp_7"
  device: "/device:CPU:0"
}
node {
  name: "init"
  op: "NoOp"
  input: "^init/NoOp"
  input: "^init/NoOp_1"
}
node {
  name: "net_output"
  op: "Identity"
  input: "dense/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
  function {
    signature {
      name: "__inference_while_body_468314_813"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_468336_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_468338_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_468340_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_468336"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_468338"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_468340"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/StatefulPartitionedCall"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while_placeholder_2"
      input: "while_gru_cell_468336_0"
      input: "while_gru_cell_468338_0"
      input: "while_gru_cell_468340_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 2
            i: 3
            i: 4
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_gru_cell_layer_call_and_return_conditional_losses_787"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/StatefulPartitionedCall:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/StatefulPartitionedCall:output:1"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_468336"
      value: "while_gru_cell_468336_0"
    }
    ret {
      key: "while_gru_cell_468338"
      value: "while_gru_cell_468338_0"
    }
    ret {
      key: "while_gru_cell_468340"
      value: "while_gru_cell_468340_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/StatefulPartitionedCall"
      value: "while/gru_cell/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_restore_1256"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "assignvariableop_dense_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_1_dense_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_2_rmsprop_iter"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_3_rmsprop_decay"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_4_rmsprop_learning_rate"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_5_rmsprop_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_6_rmsprop_rho"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_7_net_gru_cell_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_8_net_gru_cell_recurrent_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_9_net_gru_cell_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_10_total"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_11_count"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_12_total_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_13_count_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_14_rmsprop_dense_kernel_rms"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_15_rmsprop_dense_bias_rms"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_16_rmsprop_net_gru_cell_kernel_rms"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_17_rmsprop_net_gru_cell_recurrent_kernel_rms"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_18_rmsprop_net_gru_cell_bias_rms"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity_20"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "AssignVariableOp"
      control_output: "AssignVariableOp_1"
      control_output: "AssignVariableOp_10"
      control_output: "AssignVariableOp_11"
      control_output: "AssignVariableOp_12"
      control_output: "AssignVariableOp_13"
      control_output: "AssignVariableOp_14"
      control_output: "AssignVariableOp_15"
      control_output: "AssignVariableOp_16"
      control_output: "AssignVariableOp_17"
      control_output: "AssignVariableOp_18"
      control_output: "AssignVariableOp_2"
      control_output: "AssignVariableOp_3"
      control_output: "AssignVariableOp_4"
      control_output: "AssignVariableOp_5"
      control_output: "AssignVariableOp_6"
      control_output: "AssignVariableOp_7"
      control_output: "AssignVariableOp_8"
      control_output: "AssignVariableOp_9"
    }
    node_def {
      name: "RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 20
              }
            }
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/rho/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/1/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/1/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
    }
    node_def {
      name: "RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 20
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "RestoreV2"
      op: "RestoreV2"
      input: "file_prefix"
      input: "RestoreV2/tensor_names:output:0"
      input: "RestoreV2/shape_and_slices:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RestoreV2:tensors:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "assignvariableop_dense_kernel"
      input: "Identity:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "RestoreV2:tensors:1"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "assignvariableop_1_dense_bias"
      input: "Identity_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "RestoreV2:tensors:2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "assignvariableop_2_rmsprop_iter"
      input: "Identity_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "RestoreV2:tensors:3"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "assignvariableop_3_rmsprop_decay"
      input: "Identity_3:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "RestoreV2:tensors:4"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "assignvariableop_4_rmsprop_learning_rate"
      input: "Identity_4:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "RestoreV2:tensors:5"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "assignvariableop_5_rmsprop_momentum"
      input: "Identity_5:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_6"
      op: "Identity"
      input: "RestoreV2:tensors:6"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "assignvariableop_6_rmsprop_rho"
      input: "Identity_6:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_7"
      op: "Identity"
      input: "RestoreV2:tensors:7"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "assignvariableop_7_net_gru_cell_kernel"
      input: "Identity_7:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_8"
      op: "Identity"
      input: "RestoreV2:tensors:8"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "assignvariableop_8_net_gru_cell_recurrent_kernel"
      input: "Identity_8:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_9"
      op: "Identity"
      input: "RestoreV2:tensors:9"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "assignvariableop_9_net_gru_cell_bias"
      input: "Identity_9:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_10"
      op: "Identity"
      input: "RestoreV2:tensors:10"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "assignvariableop_10_total"
      input: "Identity_10:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_11"
      op: "Identity"
      input: "RestoreV2:tensors:11"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "assignvariableop_11_count"
      input: "Identity_11:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_12"
      op: "Identity"
      input: "RestoreV2:tensors:12"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "assignvariableop_12_total_1"
      input: "Identity_12:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_13"
      op: "Identity"
      input: "RestoreV2:tensors:13"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "assignvariableop_13_count_1"
      input: "Identity_13:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_14"
      op: "Identity"
      input: "RestoreV2:tensors:14"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "assignvariableop_14_rmsprop_dense_kernel_rms"
      input: "Identity_14:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_15"
      op: "Identity"
      input: "RestoreV2:tensors:15"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "assignvariableop_15_rmsprop_dense_bias_rms"
      input: "Identity_15:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_16"
      op: "Identity"
      input: "RestoreV2:tensors:16"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "assignvariableop_16_rmsprop_net_gru_cell_kernel_rms"
      input: "Identity_16:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_17"
      op: "Identity"
      input: "RestoreV2:tensors:17"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "assignvariableop_17_rmsprop_net_gru_cell_recurrent_kernel_rms"
      input: "Identity_17:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Identity_18"
      op: "Identity"
      input: "RestoreV2:tensors:18"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "assignvariableop_18_rmsprop_net_gru_cell_bias_rms"
      input: "Identity_18:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      device: "/device:CPU:0"
    }
    node_def {
      name: "Identity_19"
      op: "Identity"
      input: "file_prefix"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      input: "^NoOp"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "NoOp_1"
      op: "NoOp"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity_20"
      op: "Identity"
      input: "Identity_19:output:0"
      input: "^NoOp_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    ret {
      key: "identity_20"
      value: "Identity_20:output:0"
    }
    control_ret {
      key: "AssignVariableOp"
      value: "AssignVariableOp"
    }
    control_ret {
      key: "AssignVariableOp_1"
      value: "AssignVariableOp_1"
    }
    control_ret {
      key: "AssignVariableOp_10"
      value: "AssignVariableOp_10"
    }
    control_ret {
      key: "AssignVariableOp_11"
      value: "AssignVariableOp_11"
    }
    control_ret {
      key: "AssignVariableOp_12"
      value: "AssignVariableOp_12"
    }
    control_ret {
      key: "AssignVariableOp_13"
      value: "AssignVariableOp_13"
    }
    control_ret {
      key: "AssignVariableOp_14"
      value: "AssignVariableOp_14"
    }
    control_ret {
      key: "AssignVariableOp_15"
      value: "AssignVariableOp_15"
    }
    control_ret {
      key: "AssignVariableOp_16"
      value: "AssignVariableOp_16"
    }
    control_ret {
      key: "AssignVariableOp_17"
      value: "AssignVariableOp_17"
    }
    control_ret {
      key: "AssignVariableOp_18"
      value: "AssignVariableOp_18"
    }
    control_ret {
      key: "AssignVariableOp_2"
      value: "AssignVariableOp_2"
    }
    control_ret {
      key: "AssignVariableOp_3"
      value: "AssignVariableOp_3"
    }
    control_ret {
      key: "AssignVariableOp_4"
      value: "AssignVariableOp_4"
    }
    control_ret {
      key: "AssignVariableOp_5"
      value: "AssignVariableOp_5"
    }
    control_ret {
      key: "AssignVariableOp_6"
      value: "AssignVariableOp_6"
    }
    control_ret {
      key: "AssignVariableOp_7"
      value: "AssignVariableOp_7"
    }
    control_ret {
      key: "AssignVariableOp_8"
      value: "AssignVariableOp_8"
    }
    control_ret {
      key: "AssignVariableOp_9"
      value: "AssignVariableOp_9"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_2469"
      input_arg {
        name: "net_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_469375"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_469377"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_469379"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_469382"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_469384"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "net/StatefulPartitionedCall"
    }
    node_def {
      name: "net/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net_input"
      input: "net_469375"
      input: "net_469377"
      input: "net_469379"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_2450"
          }
        }
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net/StatefulPartitionedCall:output:0"
      input: "dense_469382"
      input: "dense_469384"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_1267"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^dense/StatefulPartitionedCall"
      input: "^net/StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "net/StatefulPartitionedCall"
      value: "net/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "net_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_3502"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_468915"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_468917"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_468919"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_468934"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_468936"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "net/StatefulPartitionedCall"
    }
    node_def {
      name: "net/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "net_468915"
      input: "net_468917"
      input: "net_468919"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_3480"
          }
        }
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net/StatefulPartitionedCall:output:0"
      input: "dense_468934"
      input: "dense_468936"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_1267"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^dense/StatefulPartitionedCall"
      input: "^net/StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "net/StatefulPartitionedCall"
      value: "net/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_470762_693"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/ReadVariableOp"
      control_output: "while/gru_cell/ReadVariableOp_1"
      control_output: "while/gru_cell/ReadVariableOp_2"
      control_output: "while/gru_cell/ReadVariableOp_3"
      control_output: "while/gru_cell/ReadVariableOp_4"
      control_output: "while/gru_cell/ReadVariableOp_5"
      control_output: "while/gru_cell/ReadVariableOp_6"
      control_output: "while/gru_cell/ReadVariableOp_7"
      control_output: "while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like"
      op: "Fill"
      input: "while/gru_cell/ones_like/Shape:output:0"
      input: "while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_1"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_2"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp:value:0"
      input: "while/gru_cell/strided_slice/stack:output:0"
      input: "while/gru_cell/strided_slice/stack_1:output:0"
      input: "while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul"
      op: "MatMul"
      input: "while/gru_cell/mul:z:0"
      input: "while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_1:value:0"
      input: "while/gru_cell/strided_slice_1/stack:output:0"
      input: "while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "while/gru_cell/mul_1:z:0"
      input: "while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_2:value:0"
      input: "while/gru_cell/strided_slice_2/stack:output:0"
      input: "while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "while/gru_cell/mul_2:z:0"
      input: "while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_3:value:0"
      input: "while/gru_cell/strided_slice_3/stack:output:0"
      input: "while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul:product:0"
      input: "while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_4:value:0"
      input: "while/gru_cell/strided_slice_4/stack:output:0"
      input: "while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_1:product:0"
      input: "while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_5:value:0"
      input: "while/gru_cell/strided_slice_5/stack:output:0"
      input: "while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_2:product:0"
      input: "while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_6:value:0"
      input: "while/gru_cell/strided_slice_6/stack:output:0"
      input: "while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_7:value:0"
      input: "while/gru_cell/strided_slice_7/stack:output:0"
      input: "while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd:output:0"
      input: "while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_3"
      op: "Mul"
      input: "while/gru_cell/add:z:0"
      input: "while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_1"
      op: "AddV2"
      input: "while/gru_cell/Mul_3:z:0"
      input: "while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_1:z:0"
      input: "while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value/Minimum:z:0"
      input: "while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_2"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_1:output:0"
      input: "while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_4"
      op: "Mul"
      input: "while/gru_cell/add_2:z:0"
      input: "while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_3"
      op: "AddV2"
      input: "while/gru_cell/Mul_4:z:0"
      input: "while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_3:z:0"
      input: "while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_5"
      op: "Mul"
      input: "while/gru_cell/clip_by_value_1:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_8:value:0"
      input: "while/gru_cell/strided_slice_8/stack:output:0"
      input: "while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "while/gru_cell/mul_5:z:0"
      input: "while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_4"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_2:output:0"
      input: "while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_6"
      op: "Mul"
      input: "while/gru_cell/clip_by_value:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub"
      op: "Sub"
      input: "while/gru_cell/sub/x:output:0"
      input: "while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_7"
      op: "Mul"
      input: "while/gru_cell/sub:z:0"
      input: "while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_5"
      op: "AddV2"
      input: "while/gru_cell/mul_6:z:0"
      input: "while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/ReadVariableOp"
      input: "^while/gru_cell/ReadVariableOp_1"
      input: "^while/gru_cell/ReadVariableOp_2"
      input: "^while/gru_cell/ReadVariableOp_3"
      input: "^while/gru_cell/ReadVariableOp_4"
      input: "^while/gru_cell/ReadVariableOp_5"
      input: "^while/gru_cell/ReadVariableOp_6"
      input: "^while/gru_cell/ReadVariableOp_7"
      input: "^while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/add_5:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_readvariableop_3_resource"
      value: "while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_6_resource"
      value: "while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_resource"
      value: "while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp"
      value: "while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_1"
      value: "while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_2"
      value: "while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_3"
      value: "while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_4"
      value: "while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_5"
      value: "while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_6"
      value: "while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_7"
      value: "while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_8"
      value: "while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_471048_584"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/ReadVariableOp"
      control_output: "while/gru_cell/ReadVariableOp_1"
      control_output: "while/gru_cell/ReadVariableOp_2"
      control_output: "while/gru_cell/ReadVariableOp_3"
      control_output: "while/gru_cell/ReadVariableOp_4"
      control_output: "while/gru_cell/ReadVariableOp_5"
      control_output: "while/gru_cell/ReadVariableOp_6"
      control_output: "while/gru_cell/ReadVariableOp_7"
      control_output: "while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like"
      op: "Fill"
      input: "while/gru_cell/ones_like/Shape:output:0"
      input: "while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout/Mul:z:0"
      input: "while/gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout_1/Mul:z:0"
      input: "while/gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout_2/Mul:z:0"
      input: "while/gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_1"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_2"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp:value:0"
      input: "while/gru_cell/strided_slice/stack:output:0"
      input: "while/gru_cell/strided_slice/stack_1:output:0"
      input: "while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul"
      op: "MatMul"
      input: "while/gru_cell/mul:z:0"
      input: "while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_1:value:0"
      input: "while/gru_cell/strided_slice_1/stack:output:0"
      input: "while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "while/gru_cell/mul_1:z:0"
      input: "while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_2:value:0"
      input: "while/gru_cell/strided_slice_2/stack:output:0"
      input: "while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "while/gru_cell/mul_2:z:0"
      input: "while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_3:value:0"
      input: "while/gru_cell/strided_slice_3/stack:output:0"
      input: "while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul:product:0"
      input: "while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_4:value:0"
      input: "while/gru_cell/strided_slice_4/stack:output:0"
      input: "while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_1:product:0"
      input: "while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_5:value:0"
      input: "while/gru_cell/strided_slice_5/stack:output:0"
      input: "while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_2:product:0"
      input: "while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_6:value:0"
      input: "while/gru_cell/strided_slice_6/stack:output:0"
      input: "while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_7:value:0"
      input: "while/gru_cell/strided_slice_7/stack:output:0"
      input: "while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd:output:0"
      input: "while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_3"
      op: "Mul"
      input: "while/gru_cell/add:z:0"
      input: "while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_1"
      op: "AddV2"
      input: "while/gru_cell/Mul_3:z:0"
      input: "while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_1:z:0"
      input: "while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value/Minimum:z:0"
      input: "while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_2"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_1:output:0"
      input: "while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_4"
      op: "Mul"
      input: "while/gru_cell/add_2:z:0"
      input: "while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_3"
      op: "AddV2"
      input: "while/gru_cell/Mul_4:z:0"
      input: "while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_3:z:0"
      input: "while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_5"
      op: "Mul"
      input: "while/gru_cell/clip_by_value_1:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_8:value:0"
      input: "while/gru_cell/strided_slice_8/stack:output:0"
      input: "while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "while/gru_cell/mul_5:z:0"
      input: "while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_4"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_2:output:0"
      input: "while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_6"
      op: "Mul"
      input: "while/gru_cell/clip_by_value:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub"
      op: "Sub"
      input: "while/gru_cell/sub/x:output:0"
      input: "while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_7"
      op: "Mul"
      input: "while/gru_cell/sub:z:0"
      input: "while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_5"
      op: "AddV2"
      input: "while/gru_cell/mul_6:z:0"
      input: "while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/ReadVariableOp"
      input: "^while/gru_cell/ReadVariableOp_1"
      input: "^while/gru_cell/ReadVariableOp_2"
      input: "^while/gru_cell/ReadVariableOp_3"
      input: "^while/gru_cell/ReadVariableOp_4"
      input: "^while/gru_cell/ReadVariableOp_5"
      input: "^while/gru_cell/ReadVariableOp_6"
      input: "^while/gru_cell/ReadVariableOp_7"
      input: "^while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/add_5:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_readvariableop_3_resource"
      value: "while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_6_resource"
      value: "while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_resource"
      value: "while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp"
      value: "while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_1"
      value: "while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_2"
      value: "while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_3"
      value: "while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_4"
      value: "while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_5"
      value: "while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_6"
      value: "while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_7"
      value: "while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_8"
      value: "while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_471047_2110"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_471047___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_471047___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_471047___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_471047___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_net_while_cond_468025_240"
      input_arg {
        name: "sequential_net_while_sequential_net_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_sequential_net_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "sequential_net_while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "sequential_net_while_less_sequential_net_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_sequential_net_while_cond_468025___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "sequential_net_while_sequential_net_while_cond_468025___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_net_while_sequential_net_while_cond_468025___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_net_while_sequential_net_while_cond_468025___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "sequential_net_while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "sequential/net/while/Less"
      op: "Less"
      input: "sequential_net_while_placeholder"
      input: "sequential_net_while_less_sequential_net_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/Identity"
      op: "Identity"
      input: "sequential/net/while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "sequential_net_while_identity"
      value: "sequential/net/while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_470190_2609"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/ReadVariableOp"
      control_output: "while/gru_cell/ReadVariableOp_1"
      control_output: "while/gru_cell/ReadVariableOp_2"
      control_output: "while/gru_cell/ReadVariableOp_3"
      control_output: "while/gru_cell/ReadVariableOp_4"
      control_output: "while/gru_cell/ReadVariableOp_5"
      control_output: "while/gru_cell/ReadVariableOp_6"
      control_output: "while/gru_cell/ReadVariableOp_7"
      control_output: "while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like"
      op: "Fill"
      input: "while/gru_cell/ones_like/Shape:output:0"
      input: "while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_1"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_2"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp:value:0"
      input: "while/gru_cell/strided_slice/stack:output:0"
      input: "while/gru_cell/strided_slice/stack_1:output:0"
      input: "while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul"
      op: "MatMul"
      input: "while/gru_cell/mul:z:0"
      input: "while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_1:value:0"
      input: "while/gru_cell/strided_slice_1/stack:output:0"
      input: "while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "while/gru_cell/mul_1:z:0"
      input: "while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_2:value:0"
      input: "while/gru_cell/strided_slice_2/stack:output:0"
      input: "while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "while/gru_cell/mul_2:z:0"
      input: "while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_3:value:0"
      input: "while/gru_cell/strided_slice_3/stack:output:0"
      input: "while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul:product:0"
      input: "while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_4:value:0"
      input: "while/gru_cell/strided_slice_4/stack:output:0"
      input: "while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_1:product:0"
      input: "while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_5:value:0"
      input: "while/gru_cell/strided_slice_5/stack:output:0"
      input: "while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_2:product:0"
      input: "while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_6:value:0"
      input: "while/gru_cell/strided_slice_6/stack:output:0"
      input: "while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_7:value:0"
      input: "while/gru_cell/strided_slice_7/stack:output:0"
      input: "while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd:output:0"
      input: "while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_3"
      op: "Mul"
      input: "while/gru_cell/add:z:0"
      input: "while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_1"
      op: "AddV2"
      input: "while/gru_cell/Mul_3:z:0"
      input: "while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_1:z:0"
      input: "while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value/Minimum:z:0"
      input: "while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_2"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_1:output:0"
      input: "while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_4"
      op: "Mul"
      input: "while/gru_cell/add_2:z:0"
      input: "while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_3"
      op: "AddV2"
      input: "while/gru_cell/Mul_4:z:0"
      input: "while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_3:z:0"
      input: "while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_5"
      op: "Mul"
      input: "while/gru_cell/clip_by_value_1:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_8:value:0"
      input: "while/gru_cell/strided_slice_8/stack:output:0"
      input: "while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "while/gru_cell/mul_5:z:0"
      input: "while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_4"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_2:output:0"
      input: "while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_6"
      op: "Mul"
      input: "while/gru_cell/clip_by_value:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub"
      op: "Sub"
      input: "while/gru_cell/sub/x:output:0"
      input: "while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_7"
      op: "Mul"
      input: "while/gru_cell/sub:z:0"
      input: "while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_5"
      op: "AddV2"
      input: "while/gru_cell/mul_6:z:0"
      input: "while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/ReadVariableOp"
      input: "^while/gru_cell/ReadVariableOp_1"
      input: "^while/gru_cell/ReadVariableOp_2"
      input: "^while/gru_cell/ReadVariableOp_3"
      input: "^while/gru_cell/ReadVariableOp_4"
      input: "^while/gru_cell/ReadVariableOp_5"
      input: "^while/gru_cell/ReadVariableOp_6"
      input: "^while/gru_cell/ReadVariableOp_7"
      input: "^while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/add_5:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_readvariableop_3_resource"
      value: "while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_6_resource"
      value: "while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_resource"
      value: "while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp"
      value: "while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_1"
      value: "while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_2"
      value: "while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_3"
      value: "while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_4"
      value: "while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_5"
      value: "while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_6"
      value: "while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_7"
      value: "while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_8"
      value: "while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_3480"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/ReadVariableOp"
      control_output: "gru_cell/ReadVariableOp_1"
      control_output: "gru_cell/ReadVariableOp_2"
      control_output: "gru_cell/ReadVariableOp_3"
      control_output: "gru_cell/ReadVariableOp_4"
      control_output: "gru_cell/ReadVariableOp_5"
      control_output: "gru_cell/ReadVariableOp_6"
      control_output: "gru_cell/ReadVariableOp_7"
      control_output: "gru_cell/ReadVariableOp_8"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Shape"
      op: "Shape"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like"
      op: "Fill"
      input: "gru_cell/ones_like/Shape:output:0"
      input: "gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/mul"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_1"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_2"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp:value:0"
      input: "gru_cell/strided_slice/stack:output:0"
      input: "gru_cell/strided_slice/stack_1:output:0"
      input: "gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul"
      op: "MatMul"
      input: "gru_cell/mul:z:0"
      input: "gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_1:value:0"
      input: "gru_cell/strided_slice_1/stack:output:0"
      input: "gru_cell/strided_slice_1/stack_1:output:0"
      input: "gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_1"
      op: "MatMul"
      input: "gru_cell/mul_1:z:0"
      input: "gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_2:value:0"
      input: "gru_cell/strided_slice_2/stack:output:0"
      input: "gru_cell/strided_slice_2/stack_1:output:0"
      input: "gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_2"
      op: "MatMul"
      input: "gru_cell/mul_2:z:0"
      input: "gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_3:value:0"
      input: "gru_cell/strided_slice_3/stack:output:0"
      input: "gru_cell/strided_slice_3/stack_1:output:0"
      input: "gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "gru_cell/MatMul:product:0"
      input: "gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_4:value:0"
      input: "gru_cell/strided_slice_4/stack:output:0"
      input: "gru_cell/strided_slice_4/stack_1:output:0"
      input: "gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "gru_cell/MatMul_1:product:0"
      input: "gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_5:value:0"
      input: "gru_cell/strided_slice_5/stack:output:0"
      input: "gru_cell/strided_slice_5/stack_1:output:0"
      input: "gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "gru_cell/MatMul_2:product:0"
      input: "gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_6:value:0"
      input: "gru_cell/strided_slice_6/stack:output:0"
      input: "gru_cell/strided_slice_6/stack_1:output:0"
      input: "gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_3"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_7:value:0"
      input: "gru_cell/strided_slice_7/stack:output:0"
      input: "gru_cell/strided_slice_7/stack_1:output:0"
      input: "gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_4"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add"
      op: "AddV2"
      input: "gru_cell/BiasAdd:output:0"
      input: "gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_3"
      op: "Mul"
      input: "gru_cell/add:z:0"
      input: "gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_1"
      op: "AddV2"
      input: "gru_cell/Mul_3:z:0"
      input: "gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_1:z:0"
      input: "gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value"
      op: "Maximum"
      input: "gru_cell/clip_by_value/Minimum:z:0"
      input: "gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_2"
      op: "AddV2"
      input: "gru_cell/BiasAdd_1:output:0"
      input: "gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_4"
      op: "Mul"
      input: "gru_cell/add_2:z:0"
      input: "gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_3"
      op: "AddV2"
      input: "gru_cell/Mul_4:z:0"
      input: "gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_3:z:0"
      input: "gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "gru_cell/clip_by_value_1/Minimum:z:0"
      input: "gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_5"
      op: "Mul"
      input: "gru_cell/clip_by_value_1:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_8:value:0"
      input: "gru_cell/strided_slice_8/stack:output:0"
      input: "gru_cell/strided_slice_8/stack_1:output:0"
      input: "gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_5"
      op: "MatMul"
      input: "gru_cell/mul_5:z:0"
      input: "gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add_4"
      op: "AddV2"
      input: "gru_cell/BiasAdd_2:output:0"
      input: "gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_6"
      op: "Mul"
      input: "gru_cell/clip_by_value:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/sub"
      op: "Sub"
      input: "gru_cell/sub/x:output:0"
      input: "gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_7"
      op: "Mul"
      input: "gru_cell/sub:z:0"
      input: "gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_5"
      op: "AddV2"
      input: "gru_cell/mul_6:z:0"
      input: "gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_readvariableop_resource"
      input: "gru_cell_readvariableop_3_resource"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_468771_3341"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_468770_79"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/ReadVariableOp"
      input: "^gru_cell/ReadVariableOp_1"
      input: "^gru_cell/ReadVariableOp_2"
      input: "^gru_cell/ReadVariableOp_3"
      input: "^gru_cell/ReadVariableOp_4"
      input: "^gru_cell/ReadVariableOp_5"
      input: "^gru_cell/ReadVariableOp_6"
      input: "^gru_cell/ReadVariableOp_7"
      input: "^gru_cell/ReadVariableOp_8"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/ReadVariableOp"
      value: "gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_1"
      value: "gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_2"
      value: "gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_3"
      value: "gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_4"
      value: "gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_5"
      value: "gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_6"
      value: "gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_7"
      value: "gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_8"
      value: "gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_layer_call_and_return_conditional_losses_2096"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Sigmoid:y:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_2490"
      input_arg {
        name: "net_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net_input"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      input: "unknown_2"
      input: "unknown_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
            i: 4
            i: 5
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_2480"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "net_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_3522"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      input: "unknown_2"
      input: "unknown_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
            i: 4
            i: 5
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_3502"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_469119_212"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/ReadVariableOp"
      control_output: "while/gru_cell/ReadVariableOp_1"
      control_output: "while/gru_cell/ReadVariableOp_2"
      control_output: "while/gru_cell/ReadVariableOp_3"
      control_output: "while/gru_cell/ReadVariableOp_4"
      control_output: "while/gru_cell/ReadVariableOp_5"
      control_output: "while/gru_cell/ReadVariableOp_6"
      control_output: "while/gru_cell/ReadVariableOp_7"
      control_output: "while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like"
      op: "Fill"
      input: "while/gru_cell/ones_like/Shape:output:0"
      input: "while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout/Mul:z:0"
      input: "while/gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout_1/Mul:z:0"
      input: "while/gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout_2/Mul:z:0"
      input: "while/gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_1"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_2"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp:value:0"
      input: "while/gru_cell/strided_slice/stack:output:0"
      input: "while/gru_cell/strided_slice/stack_1:output:0"
      input: "while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul"
      op: "MatMul"
      input: "while/gru_cell/mul:z:0"
      input: "while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_1:value:0"
      input: "while/gru_cell/strided_slice_1/stack:output:0"
      input: "while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "while/gru_cell/mul_1:z:0"
      input: "while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_2:value:0"
      input: "while/gru_cell/strided_slice_2/stack:output:0"
      input: "while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "while/gru_cell/mul_2:z:0"
      input: "while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_3:value:0"
      input: "while/gru_cell/strided_slice_3/stack:output:0"
      input: "while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul:product:0"
      input: "while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_4:value:0"
      input: "while/gru_cell/strided_slice_4/stack:output:0"
      input: "while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_1:product:0"
      input: "while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_5:value:0"
      input: "while/gru_cell/strided_slice_5/stack:output:0"
      input: "while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_2:product:0"
      input: "while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_6:value:0"
      input: "while/gru_cell/strided_slice_6/stack:output:0"
      input: "while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_7:value:0"
      input: "while/gru_cell/strided_slice_7/stack:output:0"
      input: "while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd:output:0"
      input: "while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_3"
      op: "Mul"
      input: "while/gru_cell/add:z:0"
      input: "while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_1"
      op: "AddV2"
      input: "while/gru_cell/Mul_3:z:0"
      input: "while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_1:z:0"
      input: "while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value/Minimum:z:0"
      input: "while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_2"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_1:output:0"
      input: "while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_4"
      op: "Mul"
      input: "while/gru_cell/add_2:z:0"
      input: "while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_3"
      op: "AddV2"
      input: "while/gru_cell/Mul_4:z:0"
      input: "while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_3:z:0"
      input: "while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_5"
      op: "Mul"
      input: "while/gru_cell/clip_by_value_1:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_8:value:0"
      input: "while/gru_cell/strided_slice_8/stack:output:0"
      input: "while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "while/gru_cell/mul_5:z:0"
      input: "while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_4"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_2:output:0"
      input: "while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_6"
      op: "Mul"
      input: "while/gru_cell/clip_by_value:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub"
      op: "Sub"
      input: "while/gru_cell/sub/x:output:0"
      input: "while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_7"
      op: "Mul"
      input: "while/gru_cell/sub:z:0"
      input: "while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_5"
      op: "AddV2"
      input: "while/gru_cell/mul_6:z:0"
      input: "while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/ReadVariableOp"
      input: "^while/gru_cell/ReadVariableOp_1"
      input: "^while/gru_cell/ReadVariableOp_2"
      input: "^while/gru_cell/ReadVariableOp_3"
      input: "^while/gru_cell/ReadVariableOp_4"
      input: "^while/gru_cell/ReadVariableOp_5"
      input: "^while/gru_cell/ReadVariableOp_6"
      input: "^while/gru_cell/ReadVariableOp_7"
      input: "^while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/add_5:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_readvariableop_3_resource"
      value: "while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_6_resource"
      value: "while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_resource"
      value: "while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp"
      value: "while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_1"
      value: "while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_2"
      value: "while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_3"
      value: "while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_4"
      value: "while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_5"
      value: "while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_6"
      value: "while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_7"
      value: "while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_8"
      value: "while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_net_while_body_468026_3076"
      input_arg {
        name: "sequential_net_while_sequential_net_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_sequential_net_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "sequential_net_while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "sequential_net_while_sequential_net_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "sequential_net_while_tensorarrayv2read_tensorlistgetitem_sequential_net_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "sequential_net_while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_net_while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_net_while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "sequential_net_while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "sequential_net_while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "sequential_net_while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "sequential_net_while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "sequential_net_while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "sequential_net_while_sequential_net_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "sequential_net_while_tensorarrayv2read_tensorlistgetitem_sequential_net_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "sequential_net_while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "sequential_net_while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "sequential_net_while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "sequential/net/while/gru_cell/ReadVariableOp"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_1"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_2"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_3"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_4"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_5"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_6"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_7"
      control_output: "sequential/net/while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "sequential/net/while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "sequential_net_while_tensorarrayv2read_tensorlistgetitem_sequential_net_tensorarrayunstack_tensorlistfromtensor_0"
      input: "sequential_net_while_placeholder"
      input: "sequential/net/while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "sequential/net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ones_like"
      op: "Fill"
      input: "sequential/net/while/gru_cell/ones_like/Shape:output:0"
      input: "sequential/net/while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/mul"
      op: "Mul"
      input: "sequential/net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "sequential/net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/mul_1"
      op: "Mul"
      input: "sequential/net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "sequential/net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/mul_2"
      op: "Mul"
      input: "sequential/net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "sequential/net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp:value:0"
      input: "sequential/net/while/gru_cell/strided_slice/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/MatMul"
      op: "MatMul"
      input: "sequential/net/while/gru_cell/mul:z:0"
      input: "sequential/net/while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_1:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_1/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "sequential/net/while/gru_cell/mul_1:z:0"
      input: "sequential/net/while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_2:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_2/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "sequential/net/while/gru_cell/mul_2:z:0"
      input: "sequential/net/while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_3:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_3/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "sequential/net/while/gru_cell/MatMul:product:0"
      input: "sequential/net/while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_4:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_4/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "sequential/net/while/gru_cell/MatMul_1:product:0"
      input: "sequential/net/while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_5:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_5/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "sequential/net/while/gru_cell/MatMul_2:product:0"
      input: "sequential/net/while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_6:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_6/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "sequential_net_while_placeholder_2"
      input: "sequential/net/while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_7:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_7/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "sequential_net_while_placeholder_2"
      input: "sequential/net/while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/add"
      op: "AddV2"
      input: "sequential/net/while/gru_cell/BiasAdd:output:0"
      input: "sequential/net/while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Mul_3"
      op: "Mul"
      input: "sequential/net/while/gru_cell/add:z:0"
      input: "sequential/net/while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Add_1"
      op: "AddV2"
      input: "sequential/net/while/gru_cell/Mul_3:z:0"
      input: "sequential/net/while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "sequential/net/while/gru_cell/Add_1:z:0"
      input: "sequential/net/while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "sequential/net/while/gru_cell/clip_by_value/Minimum:z:0"
      input: "sequential/net/while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/add_2"
      op: "AddV2"
      input: "sequential/net/while/gru_cell/BiasAdd_1:output:0"
      input: "sequential/net/while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Mul_4"
      op: "Mul"
      input: "sequential/net/while/gru_cell/add_2:z:0"
      input: "sequential/net/while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/Add_3"
      op: "AddV2"
      input: "sequential/net/while/gru_cell/Mul_4:z:0"
      input: "sequential/net/while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "sequential/net/while/gru_cell/Add_3:z:0"
      input: "sequential/net/while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "sequential/net/while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "sequential/net/while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/mul_5"
      op: "Mul"
      input: "sequential/net/while/gru_cell/clip_by_value_1:z:0"
      input: "sequential_net_while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "sequential_net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "sequential/net/while/gru_cell/ReadVariableOp_8:value:0"
      input: "sequential/net/while/gru_cell/strided_slice_8/stack:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "sequential/net/while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "sequential/net/while/gru_cell/mul_5:z:0"
      input: "sequential/net/while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/add_4"
      op: "AddV2"
      input: "sequential/net/while/gru_cell/BiasAdd_2:output:0"
      input: "sequential/net/while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/mul_6"
      op: "Mul"
      input: "sequential/net/while/gru_cell/clip_by_value:z:0"
      input: "sequential_net_while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/sub"
      op: "Sub"
      input: "sequential/net/while/gru_cell/sub/x:output:0"
      input: "sequential/net/while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/mul_7"
      op: "Mul"
      input: "sequential/net/while/gru_cell/sub:z:0"
      input: "sequential/net/while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/gru_cell/add_5"
      op: "AddV2"
      input: "sequential/net/while/gru_cell/mul_6:z:0"
      input: "sequential/net/while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "sequential_net_while_placeholder_1"
      input: "sequential_net_while_placeholder"
      input: "sequential/net/while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/add"
      op: "AddV2"
      input: "sequential_net_while_placeholder"
      input: "sequential/net/while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/add_1"
      op: "AddV2"
      input: "sequential_net_while_sequential_net_while_loop_counter"
      input: "sequential/net/while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/NoOp"
      op: "NoOp"
      input: "^sequential/net/while/gru_cell/ReadVariableOp"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_1"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_2"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_3"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_4"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_5"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_6"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_7"
      input: "^sequential/net/while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "sequential/net/while/Identity"
      op: "Identity"
      input: "sequential/net/while/add_1:z:0"
      input: "^sequential/net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/Identity_1"
      op: "Identity"
      input: "sequential_net_while_sequential_net_while_maximum_iterations"
      input: "^sequential/net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/Identity_2"
      op: "Identity"
      input: "sequential/net/while/add:z:0"
      input: "^sequential/net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/while/Identity_3"
      op: "Identity"
      input: "sequential/net/while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^sequential/net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/Identity_4"
      op: "Identity"
      input: "sequential/net/while/gru_cell/add_5:z:0"
      input: "^sequential/net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "sequential_net_while_gru_cell_readvariableop_3_resource"
      value: "sequential_net_while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "sequential_net_while_gru_cell_readvariableop_6_resource"
      value: "sequential_net_while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "sequential_net_while_gru_cell_readvariableop_resource"
      value: "sequential_net_while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "sequential_net_while_identity"
      value: "sequential/net/while/Identity:output:0"
    }
    ret {
      key: "sequential_net_while_identity_1"
      value: "sequential/net/while/Identity_1:output:0"
    }
    ret {
      key: "sequential_net_while_identity_2"
      value: "sequential/net/while/Identity_2:output:0"
    }
    ret {
      key: "sequential_net_while_identity_3"
      value: "sequential/net/while/Identity_3:output:0"
    }
    ret {
      key: "sequential_net_while_identity_4"
      value: "sequential/net/while/Identity_4:output:0"
    }
    ret {
      key: "sequential_net_while_sequential_net_strided_slice_1"
      value: "sequential_net_while_sequential_net_strided_slice_1_0"
    }
    ret {
      key: "sequential_net_while_tensorarrayv2read_tensorlistgetitem_sequential_net_tensorarrayunstack_tensorlistfromtensor"
      value: "sequential_net_while_tensorarrayv2read_tensorlistgetitem_sequential_net_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp"
      value: "sequential/net/while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_1"
      value: "sequential/net/while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_2"
      value: "sequential/net/while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_3"
      value: "sequential/net/while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_4"
      value: "sequential/net/while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_5"
      value: "sequential/net/while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_6"
      value: "sequential/net/while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_7"
      value: "sequential/net/while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "sequential/net/while/gru_cell/ReadVariableOp_8"
      value: "sequential/net/while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_1451"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/ReadVariableOp"
      control_output: "gru_cell/ReadVariableOp_1"
      control_output: "gru_cell/ReadVariableOp_2"
      control_output: "gru_cell/ReadVariableOp_3"
      control_output: "gru_cell/ReadVariableOp_4"
      control_output: "gru_cell/ReadVariableOp_5"
      control_output: "gru_cell/ReadVariableOp_6"
      control_output: "gru_cell/ReadVariableOp_7"
      control_output: "gru_cell/ReadVariableOp_8"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs_0"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Shape"
      op: "Shape"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like"
      op: "Fill"
      input: "gru_cell/ones_like/Shape:output:0"
      input: "gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Cast"
      op: "Cast"
      input: "gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout/Mul:z:0"
      input: "gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout_1/Mul:z:0"
      input: "gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout_2/Mul:z:0"
      input: "gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_1"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_2"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp:value:0"
      input: "gru_cell/strided_slice/stack:output:0"
      input: "gru_cell/strided_slice/stack_1:output:0"
      input: "gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul"
      op: "MatMul"
      input: "gru_cell/mul:z:0"
      input: "gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_1:value:0"
      input: "gru_cell/strided_slice_1/stack:output:0"
      input: "gru_cell/strided_slice_1/stack_1:output:0"
      input: "gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_1"
      op: "MatMul"
      input: "gru_cell/mul_1:z:0"
      input: "gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_2:value:0"
      input: "gru_cell/strided_slice_2/stack:output:0"
      input: "gru_cell/strided_slice_2/stack_1:output:0"
      input: "gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_2"
      op: "MatMul"
      input: "gru_cell/mul_2:z:0"
      input: "gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_3:value:0"
      input: "gru_cell/strided_slice_3/stack:output:0"
      input: "gru_cell/strided_slice_3/stack_1:output:0"
      input: "gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "gru_cell/MatMul:product:0"
      input: "gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_4:value:0"
      input: "gru_cell/strided_slice_4/stack:output:0"
      input: "gru_cell/strided_slice_4/stack_1:output:0"
      input: "gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "gru_cell/MatMul_1:product:0"
      input: "gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_5:value:0"
      input: "gru_cell/strided_slice_5/stack:output:0"
      input: "gru_cell/strided_slice_5/stack_1:output:0"
      input: "gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "gru_cell/MatMul_2:product:0"
      input: "gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_6:value:0"
      input: "gru_cell/strided_slice_6/stack:output:0"
      input: "gru_cell/strided_slice_6/stack_1:output:0"
      input: "gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_3"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_7:value:0"
      input: "gru_cell/strided_slice_7/stack:output:0"
      input: "gru_cell/strided_slice_7/stack_1:output:0"
      input: "gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_4"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add"
      op: "AddV2"
      input: "gru_cell/BiasAdd:output:0"
      input: "gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_3"
      op: "Mul"
      input: "gru_cell/add:z:0"
      input: "gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_1"
      op: "AddV2"
      input: "gru_cell/Mul_3:z:0"
      input: "gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_1:z:0"
      input: "gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value"
      op: "Maximum"
      input: "gru_cell/clip_by_value/Minimum:z:0"
      input: "gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_2"
      op: "AddV2"
      input: "gru_cell/BiasAdd_1:output:0"
      input: "gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_4"
      op: "Mul"
      input: "gru_cell/add_2:z:0"
      input: "gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_3"
      op: "AddV2"
      input: "gru_cell/Mul_4:z:0"
      input: "gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_3:z:0"
      input: "gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "gru_cell/clip_by_value_1/Minimum:z:0"
      input: "gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_5"
      op: "Mul"
      input: "gru_cell/clip_by_value_1:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_8:value:0"
      input: "gru_cell/strided_slice_8/stack:output:0"
      input: "gru_cell/strided_slice_8/stack_1:output:0"
      input: "gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_5"
      op: "MatMul"
      input: "gru_cell/mul_5:z:0"
      input: "gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add_4"
      op: "AddV2"
      input: "gru_cell/BiasAdd_2:output:0"
      input: "gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_6"
      op: "Mul"
      input: "gru_cell/clip_by_value:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/sub"
      op: "Sub"
      input: "gru_cell/sub/x:output:0"
      input: "gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_7"
      op: "Mul"
      input: "gru_cell/sub:z:0"
      input: "gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_5"
      op: "AddV2"
      input: "gru_cell/mul_6:z:0"
      input: "gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_readvariableop_resource"
      input: "gru_cell_readvariableop_3_resource"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_470476_373"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_470475_1288"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/ReadVariableOp"
      input: "^gru_cell/ReadVariableOp_1"
      input: "^gru_cell/ReadVariableOp_2"
      input: "^gru_cell/ReadVariableOp_3"
      input: "^gru_cell/ReadVariableOp_4"
      input: "^gru_cell/ReadVariableOp_5"
      input: "^gru_cell/ReadVariableOp_6"
      input: "^gru_cell/ReadVariableOp_7"
      input: "^gru_cell/ReadVariableOp_8"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/ReadVariableOp"
      value: "gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_1"
      value: "gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_2"
      value: "gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_3"
      value: "gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_4"
      value: "gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_5"
      value: "gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_6"
      value: "gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_7"
      value: "gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_8"
      value: "gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_470189_451"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_470189___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_470189___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_470189___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_470189___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_468313_387"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_468313___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_468313___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_468313___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_468313___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_while_body_469543_1939"
      input_arg {
        name: "net_while_net_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_net_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_while_net_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "net_while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "net_while_net_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "net_while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "net/while/gru_cell/ReadVariableOp"
      control_output: "net/while/gru_cell/ReadVariableOp_1"
      control_output: "net/while/gru_cell/ReadVariableOp_2"
      control_output: "net/while/gru_cell/ReadVariableOp_3"
      control_output: "net/while/gru_cell/ReadVariableOp_4"
      control_output: "net/while/gru_cell/ReadVariableOp_5"
      control_output: "net/while/gru_cell/ReadVariableOp_6"
      control_output: "net/while/gru_cell/ReadVariableOp_7"
      control_output: "net/while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "net/while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor_0"
      input: "net_while_placeholder"
      input: "net/while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ones_like"
      op: "Fill"
      input: "net/while/gru_cell/ones_like/Shape:output:0"
      input: "net/while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul"
      op: "Mul"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_1"
      op: "Mul"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_2"
      op: "Mul"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp:value:0"
      input: "net/while/gru_cell/strided_slice/stack:output:0"
      input: "net/while/gru_cell/strided_slice/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul"
      op: "MatMul"
      input: "net/while/gru_cell/mul:z:0"
      input: "net/while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_1:value:0"
      input: "net/while/gru_cell/strided_slice_1/stack:output:0"
      input: "net/while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "net/while/gru_cell/mul_1:z:0"
      input: "net/while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_2:value:0"
      input: "net/while/gru_cell/strided_slice_2/stack:output:0"
      input: "net/while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "net/while/gru_cell/mul_2:z:0"
      input: "net/while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_3:value:0"
      input: "net/while/gru_cell/strided_slice_3/stack:output:0"
      input: "net/while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "net/while/gru_cell/MatMul:product:0"
      input: "net/while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_4:value:0"
      input: "net/while/gru_cell/strided_slice_4/stack:output:0"
      input: "net/while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "net/while/gru_cell/MatMul_1:product:0"
      input: "net/while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_5:value:0"
      input: "net/while/gru_cell/strided_slice_5/stack:output:0"
      input: "net/while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "net/while/gru_cell/MatMul_2:product:0"
      input: "net/while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_6:value:0"
      input: "net/while/gru_cell/strided_slice_6/stack:output:0"
      input: "net/while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "net_while_placeholder_2"
      input: "net/while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_7:value:0"
      input: "net/while/gru_cell/strided_slice_7/stack:output:0"
      input: "net/while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "net_while_placeholder_2"
      input: "net/while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add"
      op: "AddV2"
      input: "net/while/gru_cell/BiasAdd:output:0"
      input: "net/while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Mul_3"
      op: "Mul"
      input: "net/while/gru_cell/add:z:0"
      input: "net/while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Add_1"
      op: "AddV2"
      input: "net/while/gru_cell/Mul_3:z:0"
      input: "net/while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "net/while/gru_cell/Add_1:z:0"
      input: "net/while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "net/while/gru_cell/clip_by_value/Minimum:z:0"
      input: "net/while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add_2"
      op: "AddV2"
      input: "net/while/gru_cell/BiasAdd_1:output:0"
      input: "net/while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Mul_4"
      op: "Mul"
      input: "net/while/gru_cell/add_2:z:0"
      input: "net/while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Add_3"
      op: "AddV2"
      input: "net/while/gru_cell/Mul_4:z:0"
      input: "net/while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "net/while/gru_cell/Add_3:z:0"
      input: "net/while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "net/while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "net/while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_5"
      op: "Mul"
      input: "net/while/gru_cell/clip_by_value_1:z:0"
      input: "net_while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_8:value:0"
      input: "net/while/gru_cell/strided_slice_8/stack:output:0"
      input: "net/while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "net/while/gru_cell/mul_5:z:0"
      input: "net/while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add_4"
      op: "AddV2"
      input: "net/while/gru_cell/BiasAdd_2:output:0"
      input: "net/while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_6"
      op: "Mul"
      input: "net/while/gru_cell/clip_by_value:z:0"
      input: "net_while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/sub"
      op: "Sub"
      input: "net/while/gru_cell/sub/x:output:0"
      input: "net/while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_7"
      op: "Mul"
      input: "net/while/gru_cell/sub:z:0"
      input: "net/while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add_5"
      op: "AddV2"
      input: "net/while/gru_cell/mul_6:z:0"
      input: "net/while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "net_while_placeholder_1"
      input: "net_while_placeholder"
      input: "net/while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/add"
      op: "AddV2"
      input: "net_while_placeholder"
      input: "net/while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/add_1"
      op: "AddV2"
      input: "net_while_net_while_loop_counter"
      input: "net/while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/NoOp"
      op: "NoOp"
      input: "^net/while/gru_cell/ReadVariableOp"
      input: "^net/while/gru_cell/ReadVariableOp_1"
      input: "^net/while/gru_cell/ReadVariableOp_2"
      input: "^net/while/gru_cell/ReadVariableOp_3"
      input: "^net/while/gru_cell/ReadVariableOp_4"
      input: "^net/while/gru_cell/ReadVariableOp_5"
      input: "^net/while/gru_cell/ReadVariableOp_6"
      input: "^net/while/gru_cell/ReadVariableOp_7"
      input: "^net/while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "net/while/Identity"
      op: "Identity"
      input: "net/while/add_1:z:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity_1"
      op: "Identity"
      input: "net_while_net_while_maximum_iterations"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity_2"
      op: "Identity"
      input: "net/while/add:z:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity_3"
      op: "Identity"
      input: "net/while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/while/Identity_4"
      op: "Identity"
      input: "net/while/gru_cell/add_5:z:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "net_while_gru_cell_readvariableop_3_resource"
      value: "net_while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "net_while_gru_cell_readvariableop_6_resource"
      value: "net_while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "net_while_gru_cell_readvariableop_resource"
      value: "net_while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "net_while_identity"
      value: "net/while/Identity:output:0"
    }
    ret {
      key: "net_while_identity_1"
      value: "net/while/Identity_1:output:0"
    }
    ret {
      key: "net_while_identity_2"
      value: "net/while/Identity_2:output:0"
    }
    ret {
      key: "net_while_identity_3"
      value: "net/while/Identity_3:output:0"
    }
    ret {
      key: "net_while_identity_4"
      value: "net/while/Identity_4:output:0"
    }
    ret {
      key: "net_while_net_strided_slice_1"
      value: "net_while_net_strided_slice_1_0"
    }
    ret {
      key: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor"
      value: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp"
      value: "net/while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_1"
      value: "net/while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_2"
      value: "net/while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_3"
      value: "net/while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_4"
      value: "net/while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_5"
      value: "net/while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_6"
      value: "net/while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_7"
      value: "net/while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_8"
      value: "net/while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_2500"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      input: "unknown_2"
      input: "unknown_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
            i: 4
            i: 5
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_2480"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_468573_1712"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_468573___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_468573___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_468573___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_468573___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__wrapped_model_3222"
      input_arg {
        name: "net_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "sequential_net_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_net_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_net_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_dense_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_dense_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "sequential/dense/BiasAdd/ReadVariableOp"
      control_output: "sequential/dense/MatMul/ReadVariableOp"
      control_output: "sequential/net/gru_cell/ReadVariableOp"
      control_output: "sequential/net/gru_cell/ReadVariableOp_1"
      control_output: "sequential/net/gru_cell/ReadVariableOp_2"
      control_output: "sequential/net/gru_cell/ReadVariableOp_3"
      control_output: "sequential/net/gru_cell/ReadVariableOp_4"
      control_output: "sequential/net/gru_cell/ReadVariableOp_5"
      control_output: "sequential/net/gru_cell/ReadVariableOp_6"
      control_output: "sequential/net/gru_cell/ReadVariableOp_7"
      control_output: "sequential/net/gru_cell/ReadVariableOp_8"
      control_output: "sequential/net/while"
    }
    node_def {
      name: "sequential/net/Shape"
      op: "Shape"
      input: "net_input"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice"
      op: "StridedSlice"
      input: "sequential/net/Shape:output:0"
      input: "sequential/net/strided_slice/stack:output:0"
      input: "sequential/net/strided_slice/stack_1:output:0"
      input: "sequential/net/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "sequential/net/zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "sequential/net/zeros/packed"
      op: "Pack"
      input: "sequential/net/strided_slice:output:0"
      input: "sequential/net/zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/zeros"
      op: "Fill"
      input: "sequential/net/zeros/packed:output:0"
      input: "sequential/net/zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/transpose"
      op: "Transpose"
      input: "net_input"
      input: "sequential/net/transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/Shape_1"
      op: "Shape"
      input: "sequential/net/transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_1"
      op: "StridedSlice"
      input: "sequential/net/Shape_1:output:0"
      input: "sequential/net/strided_slice_1/stack:output:0"
      input: "sequential/net/strided_slice_1/stack_1:output:0"
      input: "sequential/net/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayV2"
      op: "TensorListReserve"
      input: "sequential/net/TensorArrayV2/element_shape:output:0"
      input: "sequential/net/strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "sequential/net/transpose:y:0"
      input: "sequential/net/TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_2"
      op: "StridedSlice"
      input: "sequential/net/transpose:y:0"
      input: "sequential/net/strided_slice_2/stack:output:0"
      input: "sequential/net/strided_slice_2/stack_1:output:0"
      input: "sequential/net/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "sequential/net/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ones_like"
      op: "Fill"
      input: "sequential/net/gru_cell/ones_like/Shape:output:0"
      input: "sequential/net/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/mul"
      op: "Mul"
      input: "sequential/net/strided_slice_2:output:0"
      input: "sequential/net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/mul_1"
      op: "Mul"
      input: "sequential/net/strided_slice_2:output:0"
      input: "sequential/net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/mul_2"
      op: "Mul"
      input: "sequential/net/strided_slice_2:output:0"
      input: "sequential/net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp:value:0"
      input: "sequential/net/gru_cell/strided_slice/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/MatMul"
      op: "MatMul"
      input: "sequential/net/gru_cell/mul:z:0"
      input: "sequential/net/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_1:value:0"
      input: "sequential/net/gru_cell/strided_slice_1/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_1/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/MatMul_1"
      op: "MatMul"
      input: "sequential/net/gru_cell/mul_1:z:0"
      input: "sequential/net/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_2:value:0"
      input: "sequential/net/gru_cell/strided_slice_2/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_2/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/MatMul_2"
      op: "MatMul"
      input: "sequential/net/gru_cell/mul_2:z:0"
      input: "sequential/net/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_3:value:0"
      input: "sequential/net/gru_cell/strided_slice_3/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_3/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "sequential/net/gru_cell/MatMul:product:0"
      input: "sequential/net/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_4:value:0"
      input: "sequential/net/gru_cell/strided_slice_4/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_4/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "sequential/net/gru_cell/MatMul_1:product:0"
      input: "sequential/net/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_5:value:0"
      input: "sequential/net/gru_cell/strided_slice_5/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_5/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "sequential/net/gru_cell/MatMul_2:product:0"
      input: "sequential/net/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_6:value:0"
      input: "sequential/net/gru_cell/strided_slice_6/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_6/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/MatMul_3"
      op: "MatMul"
      input: "sequential/net/zeros:output:0"
      input: "sequential/net/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_7:value:0"
      input: "sequential/net/gru_cell/strided_slice_7/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_7/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/MatMul_4"
      op: "MatMul"
      input: "sequential/net/zeros:output:0"
      input: "sequential/net/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/add"
      op: "AddV2"
      input: "sequential/net/gru_cell/BiasAdd:output:0"
      input: "sequential/net/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Mul_3"
      op: "Mul"
      input: "sequential/net/gru_cell/add:z:0"
      input: "sequential/net/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Add_1"
      op: "AddV2"
      input: "sequential/net/gru_cell/Mul_3:z:0"
      input: "sequential/net/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "sequential/net/gru_cell/Add_1:z:0"
      input: "sequential/net/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value"
      op: "Maximum"
      input: "sequential/net/gru_cell/clip_by_value/Minimum:z:0"
      input: "sequential/net/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/add_2"
      op: "AddV2"
      input: "sequential/net/gru_cell/BiasAdd_1:output:0"
      input: "sequential/net/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Mul_4"
      op: "Mul"
      input: "sequential/net/gru_cell/add_2:z:0"
      input: "sequential/net/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/Add_3"
      op: "AddV2"
      input: "sequential/net/gru_cell/Mul_4:z:0"
      input: "sequential/net/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "sequential/net/gru_cell/Add_3:z:0"
      input: "sequential/net/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "sequential/net/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "sequential/net/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/mul_5"
      op: "Mul"
      input: "sequential/net/gru_cell/clip_by_value_1:z:0"
      input: "sequential/net/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "sequential_net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "sequential/net/gru_cell/ReadVariableOp_8:value:0"
      input: "sequential/net/gru_cell/strided_slice_8/stack:output:0"
      input: "sequential/net/gru_cell/strided_slice_8/stack_1:output:0"
      input: "sequential/net/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/MatMul_5"
      op: "MatMul"
      input: "sequential/net/gru_cell/mul_5:z:0"
      input: "sequential/net/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/add_4"
      op: "AddV2"
      input: "sequential/net/gru_cell/BiasAdd_2:output:0"
      input: "sequential/net/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/mul_6"
      op: "Mul"
      input: "sequential/net/gru_cell/clip_by_value:z:0"
      input: "sequential/net/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/sub"
      op: "Sub"
      input: "sequential/net/gru_cell/sub/x:output:0"
      input: "sequential/net/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/mul_7"
      op: "Mul"
      input: "sequential/net/gru_cell/sub:z:0"
      input: "sequential/net/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/gru_cell/add_5"
      op: "AddV2"
      input: "sequential/net/gru_cell/mul_6:z:0"
      input: "sequential/net/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayV2_1"
      op: "TensorListReserve"
      input: "sequential/net/TensorArrayV2_1/element_shape:output:0"
      input: "sequential/net/strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "sequential/net/time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/while"
      op: "While"
      input: "sequential/net/while/loop_counter:output:0"
      input: "sequential/net/while/maximum_iterations:output:0"
      input: "sequential/net/time:output:0"
      input: "sequential/net/TensorArrayV2_1:handle:0"
      input: "sequential/net/zeros:output:0"
      input: "sequential/net/strided_slice_1:output:0"
      input: "sequential/net/TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "sequential_net_gru_cell_readvariableop_resource"
      input: "sequential_net_gru_cell_readvariableop_3_resource"
      input: "sequential_net_gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_sequential_net_while_body_468026_3076"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_sequential_net_while_cond_468025_240"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "sequential/net/while:output:3"
      input: "sequential/net/TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "sequential/net/strided_slice_3"
      op: "StridedSlice"
      input: "sequential/net/TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "sequential/net/strided_slice_3/stack:output:0"
      input: "sequential/net/strided_slice_3/stack_1:output:0"
      input: "sequential/net/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "sequential/net/transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "sequential/net/transpose_1"
      op: "Transpose"
      input: "sequential/net/TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "sequential/net/transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sequential/dense/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_dense_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/dense/MatMul"
      op: "MatMul"
      input: "sequential/net/strided_slice_3:output:0"
      input: "sequential/dense/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "sequential/dense/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_dense_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sequential/dense/BiasAdd"
      op: "BiasAdd"
      input: "sequential/dense/MatMul:product:0"
      input: "sequential/dense/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "sequential/dense/Sigmoid"
      op: "Sigmoid"
      input: "sequential/dense/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^sequential/dense/BiasAdd/ReadVariableOp"
      input: "^sequential/dense/MatMul/ReadVariableOp"
      input: "^sequential/net/gru_cell/ReadVariableOp"
      input: "^sequential/net/gru_cell/ReadVariableOp_1"
      input: "^sequential/net/gru_cell/ReadVariableOp_2"
      input: "^sequential/net/gru_cell/ReadVariableOp_3"
      input: "^sequential/net/gru_cell/ReadVariableOp_4"
      input: "^sequential/net/gru_cell/ReadVariableOp_5"
      input: "^sequential/net/gru_cell/ReadVariableOp_6"
      input: "^sequential/net/gru_cell/ReadVariableOp_7"
      input: "^sequential/net/gru_cell/ReadVariableOp_8"
      input: "^sequential/net/while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "sequential/dense/Sigmoid:y:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "sequential/dense/BiasAdd/ReadVariableOp"
      value: "sequential/dense/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential/dense/MatMul/ReadVariableOp"
      value: "sequential/dense/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp"
      value: "sequential/net/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_1"
      value: "sequential/net/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_2"
      value: "sequential/net/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_3"
      value: "sequential/net/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_4"
      value: "sequential/net/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_5"
      value: "sequential/net/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_6"
      value: "sequential/net/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_7"
      value: "sequential/net/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "sequential/net/gru_cell/ReadVariableOp_8"
      value: "sequential/net/gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "sequential/net/while"
      value: "sequential/net/while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "net_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_468574_2903"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_468596_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_468598_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_468600_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_468596"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_468598"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_468600"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/StatefulPartitionedCall"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while_placeholder_2"
      input: "while_gru_cell_468596_0"
      input: "while_gru_cell_468598_0"
      input: "while_gru_cell_468600_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 2
            i: 3
            i: 4
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_gru_cell_layer_call_and_return_conditional_losses_2866"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/StatefulPartitionedCall:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/StatefulPartitionedCall:output:1"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_468596"
      value: "while_gru_cell_468596_0"
    }
    ret {
      key: "while_gru_cell_468598"
      value: "while_gru_cell_468598_0"
    }
    ret {
      key: "while_gru_cell_468600"
      value: "while_gru_cell_468600_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/StatefulPartitionedCall"
      value: "while/gru_cell/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_gru_cell_layer_call_and_return_conditional_losses_1830"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "states_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "ReadVariableOp"
      control_output: "ReadVariableOp_1"
      control_output: "ReadVariableOp_2"
      control_output: "ReadVariableOp_3"
      control_output: "ReadVariableOp_4"
      control_output: "ReadVariableOp_5"
      control_output: "ReadVariableOp_6"
      control_output: "ReadVariableOp_7"
      control_output: "ReadVariableOp_8"
    }
    node_def {
      name: "ones_like/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_like"
      op: "Fill"
      input: "ones_like/Shape:output:0"
      input: "ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "ones_like:output:0"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Shape"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Cast"
      op: "Cast"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dropout/Mul_1"
      op: "Mul"
      input: "dropout/Mul:z:0"
      input: "dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "dropout_1/Mul"
      op: "Mul"
      input: "ones_like:output:0"
      input: "dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_1/Shape"
      op: "Shape"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout_1/random_uniform/RandomUniform:output:0"
      input: "dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_1/Cast"
      op: "Cast"
      input: "dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dropout_1/Mul_1"
      op: "Mul"
      input: "dropout_1/Mul:z:0"
      input: "dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "dropout_2/Mul"
      op: "Mul"
      input: "ones_like:output:0"
      input: "dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_2/Shape"
      op: "Shape"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout_2/random_uniform/RandomUniform:output:0"
      input: "dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_2/Cast"
      op: "Cast"
      input: "dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dropout_2/Mul_1"
      op: "Mul"
      input: "dropout_2/Mul:z:0"
      input: "dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "inputs"
      input: "dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "inputs"
      input: "dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "inputs"
      input: "dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "ReadVariableOp:value:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "mul:z:0"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "ReadVariableOp_1:value:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "mul_1:z:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "ReadVariableOp_2:value:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_2"
      op: "MatMul"
      input: "mul_2:z:0"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "ReadVariableOp_3:value:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4"
      op: "StridedSlice"
      input: "ReadVariableOp_4:value:0"
      input: "strided_slice_4/stack:output:0"
      input: "strided_slice_4/stack_1:output:0"
      input: "strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_1"
      op: "BiasAdd"
      input: "MatMul_1:product:0"
      input: "strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5"
      op: "StridedSlice"
      input: "ReadVariableOp_5:value:0"
      input: "strided_slice_5/stack:output:0"
      input: "strided_slice_5/stack_1:output:0"
      input: "strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_2"
      op: "BiasAdd"
      input: "MatMul_2:product:0"
      input: "strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6"
      op: "StridedSlice"
      input: "ReadVariableOp_6:value:0"
      input: "strided_slice_6/stack:output:0"
      input: "strided_slice_6/stack_1:output:0"
      input: "strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_3"
      op: "MatMul"
      input: "states_0"
      input: "strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7"
      op: "StridedSlice"
      input: "ReadVariableOp_7:value:0"
      input: "strided_slice_7/stack:output:0"
      input: "strided_slice_7/stack_1:output:0"
      input: "strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_4"
      op: "MatMul"
      input: "states_0"
      input: "strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "BiasAdd:output:0"
      input: "MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_3"
      op: "Mul"
      input: "add:z:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_1"
      op: "AddV2"
      input: "Mul_3:z:0"
      input: "Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum"
      op: "Minimum"
      input: "Add_1:z:0"
      input: "clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value"
      op: "Maximum"
      input: "clip_by_value/Minimum:z:0"
      input: "clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "BiasAdd_1:output:0"
      input: "MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_4"
      op: "Mul"
      input: "add_2:z:0"
      input: "Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_3"
      op: "AddV2"
      input: "Mul_4:z:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum"
      op: "Minimum"
      input: "Add_3:z:0"
      input: "clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1"
      op: "Maximum"
      input: "clip_by_value_1/Minimum:z:0"
      input: "clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_5"
      op: "Mul"
      input: "clip_by_value_1:z:0"
      input: "states_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8"
      op: "StridedSlice"
      input: "ReadVariableOp_8:value:0"
      input: "strided_slice_8/stack:output:0"
      input: "strided_slice_8/stack_1:output:0"
      input: "strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_5"
      op: "MatMul"
      input: "mul_5:z:0"
      input: "strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add_4"
      op: "AddV2"
      input: "BiasAdd_2:output:0"
      input: "MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_6"
      op: "Mul"
      input: "clip_by_value:z:0"
      input: "states_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "sub/x:output:0"
      input: "clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_7"
      op: "Mul"
      input: "sub:z:0"
      input: "add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_5"
      op: "AddV2"
      input: "mul_6:z:0"
      input: "mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^ReadVariableOp"
      input: "^ReadVariableOp_1"
      input: "^ReadVariableOp_2"
      input: "^ReadVariableOp_3"
      input: "^ReadVariableOp_4"
      input: "^ReadVariableOp_5"
      input: "^ReadVariableOp_6"
      input: "^ReadVariableOp_7"
      input: "^ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "ReadVariableOp"
      value: "ReadVariableOp"
    }
    control_ret {
      key: "ReadVariableOp_1"
      value: "ReadVariableOp_1"
    }
    control_ret {
      key: "ReadVariableOp_2"
      value: "ReadVariableOp_2"
    }
    control_ret {
      key: "ReadVariableOp_3"
      value: "ReadVariableOp_3"
    }
    control_ret {
      key: "ReadVariableOp_4"
      value: "ReadVariableOp_4"
    }
    control_ret {
      key: "ReadVariableOp_5"
      value: "ReadVariableOp_5"
    }
    control_ret {
      key: "ReadVariableOp_6"
      value: "ReadVariableOp_6"
    }
    control_ret {
      key: "ReadVariableOp_7"
      value: "ReadVariableOp_7"
    }
    control_ret {
      key: "ReadVariableOp_8"
      value: "ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "states/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_layer_call_and_return_conditional_losses_1267"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Sigmoid:y:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_3491"
      input_arg {
        name: "net_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_469359"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_469361"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_469363"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_469366"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_469368"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "net/StatefulPartitionedCall"
    }
    node_def {
      name: "net/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net_input"
      input: "net_469359"
      input: "net_469361"
      input: "net_469363"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_3480"
          }
        }
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net/StatefulPartitionedCall:output:0"
      input: "dense_469366"
      input: "dense_469368"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_1267"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^dense/StatefulPartitionedCall"
      input: "^net/StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "net/StatefulPartitionedCall"
      value: "net/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "net_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_fn_2967"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs_0"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_2959"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_gru_cell_layer_call_fn_2877"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "states_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "states_0"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 2
            i: 3
            i: 4
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_gru_cell_layer_call_and_return_conditional_losses_2866"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "StatefulPartitionedCall:output:1"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "states/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_gru_cell_layer_call_fn_888"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "states_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "states_0"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 2
            i: 3
            i: 4
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_gru_cell_layer_call_and_return_conditional_losses_787"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "StatefulPartitionedCall:output:1"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "states/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_while_body_469836_1021"
      input_arg {
        name: "net_while_net_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_net_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_while_net_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "net_while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "net_while_net_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "net_while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "net/while/gru_cell/ReadVariableOp"
      control_output: "net/while/gru_cell/ReadVariableOp_1"
      control_output: "net/while/gru_cell/ReadVariableOp_2"
      control_output: "net/while/gru_cell/ReadVariableOp_3"
      control_output: "net/while/gru_cell/ReadVariableOp_4"
      control_output: "net/while/gru_cell/ReadVariableOp_5"
      control_output: "net/while/gru_cell/ReadVariableOp_6"
      control_output: "net/while/gru_cell/ReadVariableOp_7"
      control_output: "net/while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "net/while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor_0"
      input: "net_while_placeholder"
      input: "net/while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ones_like"
      op: "Fill"
      input: "net/while/gru_cell/ones_like/Shape:output:0"
      input: "net/while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/Mul"
      op: "Mul"
      input: "net/while/gru_cell/ones_like:output:0"
      input: "net/while/gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/Shape"
      op: "Shape"
      input: "net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "net/while/gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "net/while/gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "net/while/gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/Cast"
      op: "Cast"
      input: "net/while/gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "net/while/gru_cell/dropout/Mul:z:0"
      input: "net/while/gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "net/while/gru_cell/ones_like:output:0"
      input: "net/while/gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "net/while/gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "net/while/gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "net/while/gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "net/while/gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "net/while/gru_cell/dropout_1/Mul:z:0"
      input: "net/while/gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "net/while/gru_cell/ones_like:output:0"
      input: "net/while/gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "net/while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "net/while/gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "net/while/gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "net/while/gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "net/while/gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "net/while/gru_cell/dropout_2/Mul:z:0"
      input: "net/while/gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul"
      op: "Mul"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "net/while/gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_1"
      op: "Mul"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "net/while/gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_2"
      op: "Mul"
      input: "net/while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "net/while/gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp:value:0"
      input: "net/while/gru_cell/strided_slice/stack:output:0"
      input: "net/while/gru_cell/strided_slice/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul"
      op: "MatMul"
      input: "net/while/gru_cell/mul:z:0"
      input: "net/while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_1:value:0"
      input: "net/while/gru_cell/strided_slice_1/stack:output:0"
      input: "net/while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "net/while/gru_cell/mul_1:z:0"
      input: "net/while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_2:value:0"
      input: "net/while/gru_cell/strided_slice_2/stack:output:0"
      input: "net/while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "net/while/gru_cell/mul_2:z:0"
      input: "net/while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_3:value:0"
      input: "net/while/gru_cell/strided_slice_3/stack:output:0"
      input: "net/while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "net/while/gru_cell/MatMul:product:0"
      input: "net/while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_4:value:0"
      input: "net/while/gru_cell/strided_slice_4/stack:output:0"
      input: "net/while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "net/while/gru_cell/MatMul_1:product:0"
      input: "net/while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_5:value:0"
      input: "net/while/gru_cell/strided_slice_5/stack:output:0"
      input: "net/while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "net/while/gru_cell/MatMul_2:product:0"
      input: "net/while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_6:value:0"
      input: "net/while/gru_cell/strided_slice_6/stack:output:0"
      input: "net/while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "net_while_placeholder_2"
      input: "net/while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_7:value:0"
      input: "net/while/gru_cell/strided_slice_7/stack:output:0"
      input: "net/while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "net_while_placeholder_2"
      input: "net/while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add"
      op: "AddV2"
      input: "net/while/gru_cell/BiasAdd:output:0"
      input: "net/while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Mul_3"
      op: "Mul"
      input: "net/while/gru_cell/add:z:0"
      input: "net/while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Add_1"
      op: "AddV2"
      input: "net/while/gru_cell/Mul_3:z:0"
      input: "net/while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "net/while/gru_cell/Add_1:z:0"
      input: "net/while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "net/while/gru_cell/clip_by_value/Minimum:z:0"
      input: "net/while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add_2"
      op: "AddV2"
      input: "net/while/gru_cell/BiasAdd_1:output:0"
      input: "net/while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Mul_4"
      op: "Mul"
      input: "net/while/gru_cell/add_2:z:0"
      input: "net/while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/Add_3"
      op: "AddV2"
      input: "net/while/gru_cell/Mul_4:z:0"
      input: "net/while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "net/while/gru_cell/Add_3:z:0"
      input: "net/while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "net/while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "net/while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_5"
      op: "Mul"
      input: "net/while/gru_cell/clip_by_value_1:z:0"
      input: "net_while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "net_while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "net/while/gru_cell/ReadVariableOp_8:value:0"
      input: "net/while/gru_cell/strided_slice_8/stack:output:0"
      input: "net/while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "net/while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "net/while/gru_cell/mul_5:z:0"
      input: "net/while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add_4"
      op: "AddV2"
      input: "net/while/gru_cell/BiasAdd_2:output:0"
      input: "net/while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_6"
      op: "Mul"
      input: "net/while/gru_cell/clip_by_value:z:0"
      input: "net_while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/sub"
      op: "Sub"
      input: "net/while/gru_cell/sub/x:output:0"
      input: "net/while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/mul_7"
      op: "Mul"
      input: "net/while/gru_cell/sub:z:0"
      input: "net/while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/gru_cell/add_5"
      op: "AddV2"
      input: "net/while/gru_cell/mul_6:z:0"
      input: "net/while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "net_while_placeholder_1"
      input: "net_while_placeholder"
      input: "net/while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/add"
      op: "AddV2"
      input: "net_while_placeholder"
      input: "net/while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/while/add_1"
      op: "AddV2"
      input: "net_while_net_while_loop_counter"
      input: "net/while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/NoOp"
      op: "NoOp"
      input: "^net/while/gru_cell/ReadVariableOp"
      input: "^net/while/gru_cell/ReadVariableOp_1"
      input: "^net/while/gru_cell/ReadVariableOp_2"
      input: "^net/while/gru_cell/ReadVariableOp_3"
      input: "^net/while/gru_cell/ReadVariableOp_4"
      input: "^net/while/gru_cell/ReadVariableOp_5"
      input: "^net/while/gru_cell/ReadVariableOp_6"
      input: "^net/while/gru_cell/ReadVariableOp_7"
      input: "^net/while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "net/while/Identity"
      op: "Identity"
      input: "net/while/add_1:z:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity_1"
      op: "Identity"
      input: "net_while_net_while_maximum_iterations"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity_2"
      op: "Identity"
      input: "net/while/add:z:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity_3"
      op: "Identity"
      input: "net/while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/while/Identity_4"
      op: "Identity"
      input: "net/while/gru_cell/add_5:z:0"
      input: "^net/while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "net_while_gru_cell_readvariableop_3_resource"
      value: "net_while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "net_while_gru_cell_readvariableop_6_resource"
      value: "net_while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "net_while_gru_cell_readvariableop_resource"
      value: "net_while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "net_while_identity"
      value: "net/while/Identity:output:0"
    }
    ret {
      key: "net_while_identity_1"
      value: "net/while/Identity_1:output:0"
    }
    ret {
      key: "net_while_identity_2"
      value: "net/while/Identity_2:output:0"
    }
    ret {
      key: "net_while_identity_3"
      value: "net/while/Identity_3:output:0"
    }
    ret {
      key: "net_while_identity_4"
      value: "net/while/Identity_4:output:0"
    }
    ret {
      key: "net_while_net_strided_slice_1"
      value: "net_while_net_strided_slice_1_0"
    }
    ret {
      key: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor"
      value: "net_while_tensorarrayv2read_tensorlistgetitem_net_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp"
      value: "net/while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_1"
      value: "net/while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_2"
      value: "net/while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_3"
      value: "net/while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_4"
      value: "net/while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_5"
      value: "net/while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_6"
      value: "net/while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_7"
      value: "net/while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "net/while/gru_cell/ReadVariableOp_8"
      value: "net/while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_1698"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/ReadVariableOp"
      control_output: "gru_cell/ReadVariableOp_1"
      control_output: "gru_cell/ReadVariableOp_2"
      control_output: "gru_cell/ReadVariableOp_3"
      control_output: "gru_cell/ReadVariableOp_4"
      control_output: "gru_cell/ReadVariableOp_5"
      control_output: "gru_cell/ReadVariableOp_6"
      control_output: "gru_cell/ReadVariableOp_7"
      control_output: "gru_cell/ReadVariableOp_8"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Shape"
      op: "Shape"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like"
      op: "Fill"
      input: "gru_cell/ones_like/Shape:output:0"
      input: "gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/mul"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_1"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_2"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp:value:0"
      input: "gru_cell/strided_slice/stack:output:0"
      input: "gru_cell/strided_slice/stack_1:output:0"
      input: "gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul"
      op: "MatMul"
      input: "gru_cell/mul:z:0"
      input: "gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_1:value:0"
      input: "gru_cell/strided_slice_1/stack:output:0"
      input: "gru_cell/strided_slice_1/stack_1:output:0"
      input: "gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_1"
      op: "MatMul"
      input: "gru_cell/mul_1:z:0"
      input: "gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_2:value:0"
      input: "gru_cell/strided_slice_2/stack:output:0"
      input: "gru_cell/strided_slice_2/stack_1:output:0"
      input: "gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_2"
      op: "MatMul"
      input: "gru_cell/mul_2:z:0"
      input: "gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_3:value:0"
      input: "gru_cell/strided_slice_3/stack:output:0"
      input: "gru_cell/strided_slice_3/stack_1:output:0"
      input: "gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "gru_cell/MatMul:product:0"
      input: "gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_4:value:0"
      input: "gru_cell/strided_slice_4/stack:output:0"
      input: "gru_cell/strided_slice_4/stack_1:output:0"
      input: "gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "gru_cell/MatMul_1:product:0"
      input: "gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_5:value:0"
      input: "gru_cell/strided_slice_5/stack:output:0"
      input: "gru_cell/strided_slice_5/stack_1:output:0"
      input: "gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "gru_cell/MatMul_2:product:0"
      input: "gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_6:value:0"
      input: "gru_cell/strided_slice_6/stack:output:0"
      input: "gru_cell/strided_slice_6/stack_1:output:0"
      input: "gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_3"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_7:value:0"
      input: "gru_cell/strided_slice_7/stack:output:0"
      input: "gru_cell/strided_slice_7/stack_1:output:0"
      input: "gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_4"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add"
      op: "AddV2"
      input: "gru_cell/BiasAdd:output:0"
      input: "gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_3"
      op: "Mul"
      input: "gru_cell/add:z:0"
      input: "gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_1"
      op: "AddV2"
      input: "gru_cell/Mul_3:z:0"
      input: "gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_1:z:0"
      input: "gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value"
      op: "Maximum"
      input: "gru_cell/clip_by_value/Minimum:z:0"
      input: "gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_2"
      op: "AddV2"
      input: "gru_cell/BiasAdd_1:output:0"
      input: "gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_4"
      op: "Mul"
      input: "gru_cell/add_2:z:0"
      input: "gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_3"
      op: "AddV2"
      input: "gru_cell/Mul_4:z:0"
      input: "gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_3:z:0"
      input: "gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "gru_cell/clip_by_value_1/Minimum:z:0"
      input: "gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_5"
      op: "Mul"
      input: "gru_cell/clip_by_value_1:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_8:value:0"
      input: "gru_cell/strided_slice_8/stack:output:0"
      input: "gru_cell/strided_slice_8/stack_1:output:0"
      input: "gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_5"
      op: "MatMul"
      input: "gru_cell/mul_5:z:0"
      input: "gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add_4"
      op: "AddV2"
      input: "gru_cell/BiasAdd_2:output:0"
      input: "gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_6"
      op: "Mul"
      input: "gru_cell/clip_by_value:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/sub"
      op: "Sub"
      input: "gru_cell/sub/x:output:0"
      input: "gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_7"
      op: "Mul"
      input: "gru_cell/sub:z:0"
      input: "gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_5"
      op: "AddV2"
      input: "gru_cell/mul_6:z:0"
      input: "gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_readvariableop_resource"
      input: "gru_cell_readvariableop_3_resource"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_470762_693"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_470761_1559"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/ReadVariableOp"
      input: "^gru_cell/ReadVariableOp_1"
      input: "^gru_cell/ReadVariableOp_2"
      input: "^gru_cell/ReadVariableOp_3"
      input: "^gru_cell/ReadVariableOp_4"
      input: "^gru_cell/ReadVariableOp_5"
      input: "^gru_cell/ReadVariableOp_6"
      input: "^gru_cell/ReadVariableOp_7"
      input: "^gru_cell/ReadVariableOp_8"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/ReadVariableOp"
      value: "gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_1"
      value: "gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_2"
      value: "gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_3"
      value: "gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_4"
      value: "gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_5"
      value: "gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_6"
      value: "gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_7"
      value: "gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_8"
      value: "gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_layer_call_fn_1274"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "unknown"
      input: "unknown_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_1267"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_save_423"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "savev2_dense_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_iter_read_readvariableop"
        type: DT_INT64
      }
      input_arg {
        name: "savev2_rmsprop_decay_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_learning_rate_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_rho_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_net_gru_cell_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_net_gru_cell_recurrent_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_net_gru_cell_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_total_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_count_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_total_1_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_count_1_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_dense_kernel_rms_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_dense_bias_rms_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_net_gru_cell_kernel_rms_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_net_gru_cell_recurrent_kernel_rms_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_rmsprop_net_gru_cell_bias_rms_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_const"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "MergeV2Checkpoints"
    }
    node_def {
      name: "StaticRegexFullMatch"
      op: "StaticRegexFullMatch"
      input: "file_prefix"
      device: "/device:CPU:*"
      attr {
        key: "pattern"
        value {
          s: "^s3://.*"
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ".part"
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp/part"
          }
        }
      }
    }
    node_def {
      name: "Select"
      op: "Select"
      input: "StaticRegexFullMatch:output:0"
      input: "Const:output:0"
      input: "Const_1:output:0"
      device: "/device:CPU:*"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "StringJoin"
      op: "StringJoin"
      input: "file_prefix"
      input: "Select:output:0"
      device: "/device:CPU:*"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node_def {
      name: "num_shards"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShardedFilename"
      op: "ShardedFilename"
      input: "StringJoin:output:0"
      input: "ShardedFilename/shard:output:0"
      input: "num_shards:output:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 20
              }
            }
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/rho/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/1/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/1/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/0/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/1/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "variables/2/.OPTIMIZER_SLOT/optimizer/rms/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
    }
    node_def {
      name: "SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 20
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "SaveV2"
      op: "SaveV2"
      input: "ShardedFilename:filename:0"
      input: "SaveV2/tensor_names:output:0"
      input: "SaveV2/shape_and_slices:output:0"
      input: "savev2_dense_kernel_read_readvariableop"
      input: "savev2_dense_bias_read_readvariableop"
      input: "savev2_rmsprop_iter_read_readvariableop"
      input: "savev2_rmsprop_decay_read_readvariableop"
      input: "savev2_rmsprop_learning_rate_read_readvariableop"
      input: "savev2_rmsprop_momentum_read_readvariableop"
      input: "savev2_rmsprop_rho_read_readvariableop"
      input: "savev2_net_gru_cell_kernel_read_readvariableop"
      input: "savev2_net_gru_cell_recurrent_kernel_read_readvariableop"
      input: "savev2_net_gru_cell_bias_read_readvariableop"
      input: "savev2_total_read_readvariableop"
      input: "savev2_count_read_readvariableop"
      input: "savev2_total_1_read_readvariableop"
      input: "savev2_count_1_read_readvariableop"
      input: "savev2_rmsprop_dense_kernel_rms_read_readvariableop"
      input: "savev2_rmsprop_dense_bias_rms_read_readvariableop"
      input: "savev2_rmsprop_net_gru_cell_kernel_rms_read_readvariableop"
      input: "savev2_rmsprop_net_gru_cell_recurrent_kernel_rms_read_readvariableop"
      input: "savev2_rmsprop_net_gru_cell_bias_rms_read_readvariableop"
      input: "savev2_const"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "ShardedFilename:filename:0"
      input: "^SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "MergeV2Checkpoints/checkpoint_prefixes:output:0"
      input: "file_prefix"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "file_prefix"
      input: "^MergeV2Checkpoints"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^MergeV2Checkpoints"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    control_ret {
      key: "MergeV2Checkpoints"
      value: "MergeV2Checkpoints"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 20
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 7
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 8
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 13
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 9
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 20
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 10
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 11
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 12
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 13
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 14
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 15
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 20
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 16
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 17
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 13
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 18
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 20
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 19
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 20
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_468771_3341"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/ReadVariableOp"
      control_output: "while/gru_cell/ReadVariableOp_1"
      control_output: "while/gru_cell/ReadVariableOp_2"
      control_output: "while/gru_cell/ReadVariableOp_3"
      control_output: "while/gru_cell/ReadVariableOp_4"
      control_output: "while/gru_cell/ReadVariableOp_5"
      control_output: "while/gru_cell/ReadVariableOp_6"
      control_output: "while/gru_cell/ReadVariableOp_7"
      control_output: "while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like"
      op: "Fill"
      input: "while/gru_cell/ones_like/Shape:output:0"
      input: "while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_1"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_2"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp:value:0"
      input: "while/gru_cell/strided_slice/stack:output:0"
      input: "while/gru_cell/strided_slice/stack_1:output:0"
      input: "while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul"
      op: "MatMul"
      input: "while/gru_cell/mul:z:0"
      input: "while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_1:value:0"
      input: "while/gru_cell/strided_slice_1/stack:output:0"
      input: "while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "while/gru_cell/mul_1:z:0"
      input: "while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_2:value:0"
      input: "while/gru_cell/strided_slice_2/stack:output:0"
      input: "while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "while/gru_cell/mul_2:z:0"
      input: "while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_3:value:0"
      input: "while/gru_cell/strided_slice_3/stack:output:0"
      input: "while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul:product:0"
      input: "while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_4:value:0"
      input: "while/gru_cell/strided_slice_4/stack:output:0"
      input: "while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_1:product:0"
      input: "while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_5:value:0"
      input: "while/gru_cell/strided_slice_5/stack:output:0"
      input: "while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_2:product:0"
      input: "while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_6:value:0"
      input: "while/gru_cell/strided_slice_6/stack:output:0"
      input: "while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_7:value:0"
      input: "while/gru_cell/strided_slice_7/stack:output:0"
      input: "while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd:output:0"
      input: "while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_3"
      op: "Mul"
      input: "while/gru_cell/add:z:0"
      input: "while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_1"
      op: "AddV2"
      input: "while/gru_cell/Mul_3:z:0"
      input: "while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_1:z:0"
      input: "while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value/Minimum:z:0"
      input: "while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_2"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_1:output:0"
      input: "while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_4"
      op: "Mul"
      input: "while/gru_cell/add_2:z:0"
      input: "while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_3"
      op: "AddV2"
      input: "while/gru_cell/Mul_4:z:0"
      input: "while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_3:z:0"
      input: "while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_5"
      op: "Mul"
      input: "while/gru_cell/clip_by_value_1:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_8:value:0"
      input: "while/gru_cell/strided_slice_8/stack:output:0"
      input: "while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "while/gru_cell/mul_5:z:0"
      input: "while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_4"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_2:output:0"
      input: "while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_6"
      op: "Mul"
      input: "while/gru_cell/clip_by_value:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub"
      op: "Sub"
      input: "while/gru_cell/sub/x:output:0"
      input: "while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_7"
      op: "Mul"
      input: "while/gru_cell/sub:z:0"
      input: "while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_5"
      op: "AddV2"
      input: "while/gru_cell/mul_6:z:0"
      input: "while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/ReadVariableOp"
      input: "^while/gru_cell/ReadVariableOp_1"
      input: "^while/gru_cell/ReadVariableOp_2"
      input: "^while/gru_cell/ReadVariableOp_3"
      input: "^while/gru_cell/ReadVariableOp_4"
      input: "^while/gru_cell/ReadVariableOp_5"
      input: "^while/gru_cell/ReadVariableOp_6"
      input: "^while/gru_cell/ReadVariableOp_7"
      input: "^while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/add_5:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_readvariableop_3_resource"
      value: "while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_6_resource"
      value: "while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_resource"
      value: "while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp"
      value: "while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_1"
      value: "while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_2"
      value: "while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_3"
      value: "while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_4"
      value: "while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_5"
      value: "while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_6"
      value: "while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_7"
      value: "while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_8"
      value: "while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_2273"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/ReadVariableOp"
      control_output: "gru_cell/ReadVariableOp_1"
      control_output: "gru_cell/ReadVariableOp_2"
      control_output: "gru_cell/ReadVariableOp_3"
      control_output: "gru_cell/ReadVariableOp_4"
      control_output: "gru_cell/ReadVariableOp_5"
      control_output: "gru_cell/ReadVariableOp_6"
      control_output: "gru_cell/ReadVariableOp_7"
      control_output: "gru_cell/ReadVariableOp_8"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Shape"
      op: "Shape"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like"
      op: "Fill"
      input: "gru_cell/ones_like/Shape:output:0"
      input: "gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Cast"
      op: "Cast"
      input: "gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout/Mul:z:0"
      input: "gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout_1/Mul:z:0"
      input: "gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout_2/Mul:z:0"
      input: "gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_1"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_2"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp:value:0"
      input: "gru_cell/strided_slice/stack:output:0"
      input: "gru_cell/strided_slice/stack_1:output:0"
      input: "gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul"
      op: "MatMul"
      input: "gru_cell/mul:z:0"
      input: "gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_1:value:0"
      input: "gru_cell/strided_slice_1/stack:output:0"
      input: "gru_cell/strided_slice_1/stack_1:output:0"
      input: "gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_1"
      op: "MatMul"
      input: "gru_cell/mul_1:z:0"
      input: "gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_2:value:0"
      input: "gru_cell/strided_slice_2/stack:output:0"
      input: "gru_cell/strided_slice_2/stack_1:output:0"
      input: "gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_2"
      op: "MatMul"
      input: "gru_cell/mul_2:z:0"
      input: "gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_3:value:0"
      input: "gru_cell/strided_slice_3/stack:output:0"
      input: "gru_cell/strided_slice_3/stack_1:output:0"
      input: "gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "gru_cell/MatMul:product:0"
      input: "gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_4:value:0"
      input: "gru_cell/strided_slice_4/stack:output:0"
      input: "gru_cell/strided_slice_4/stack_1:output:0"
      input: "gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "gru_cell/MatMul_1:product:0"
      input: "gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_5:value:0"
      input: "gru_cell/strided_slice_5/stack:output:0"
      input: "gru_cell/strided_slice_5/stack_1:output:0"
      input: "gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "gru_cell/MatMul_2:product:0"
      input: "gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_6:value:0"
      input: "gru_cell/strided_slice_6/stack:output:0"
      input: "gru_cell/strided_slice_6/stack_1:output:0"
      input: "gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_3"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_7:value:0"
      input: "gru_cell/strided_slice_7/stack:output:0"
      input: "gru_cell/strided_slice_7/stack_1:output:0"
      input: "gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_4"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add"
      op: "AddV2"
      input: "gru_cell/BiasAdd:output:0"
      input: "gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_3"
      op: "Mul"
      input: "gru_cell/add:z:0"
      input: "gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_1"
      op: "AddV2"
      input: "gru_cell/Mul_3:z:0"
      input: "gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_1:z:0"
      input: "gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value"
      op: "Maximum"
      input: "gru_cell/clip_by_value/Minimum:z:0"
      input: "gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_2"
      op: "AddV2"
      input: "gru_cell/BiasAdd_1:output:0"
      input: "gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_4"
      op: "Mul"
      input: "gru_cell/add_2:z:0"
      input: "gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_3"
      op: "AddV2"
      input: "gru_cell/Mul_4:z:0"
      input: "gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_3:z:0"
      input: "gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "gru_cell/clip_by_value_1/Minimum:z:0"
      input: "gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_5"
      op: "Mul"
      input: "gru_cell/clip_by_value_1:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_8:value:0"
      input: "gru_cell/strided_slice_8/stack:output:0"
      input: "gru_cell/strided_slice_8/stack_1:output:0"
      input: "gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_5"
      op: "MatMul"
      input: "gru_cell/mul_5:z:0"
      input: "gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add_4"
      op: "AddV2"
      input: "gru_cell/BiasAdd_2:output:0"
      input: "gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_6"
      op: "Mul"
      input: "gru_cell/clip_by_value:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/sub"
      op: "Sub"
      input: "gru_cell/sub/x:output:0"
      input: "gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_7"
      op: "Mul"
      input: "gru_cell/sub:z:0"
      input: "gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_5"
      op: "AddV2"
      input: "gru_cell/mul_6:z:0"
      input: "gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_readvariableop_resource"
      input: "gru_cell_readvariableop_3_resource"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_471048_584"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_471047_2110"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/ReadVariableOp"
      input: "^gru_cell/ReadVariableOp_1"
      input: "^gru_cell/ReadVariableOp_2"
      input: "^gru_cell/ReadVariableOp_3"
      input: "^gru_cell/ReadVariableOp_4"
      input: "^gru_cell/ReadVariableOp_5"
      input: "^gru_cell/ReadVariableOp_6"
      input: "^gru_cell/ReadVariableOp_7"
      input: "^gru_cell/ReadVariableOp_8"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/ReadVariableOp"
      value: "gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_1"
      value: "gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_2"
      value: "gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_3"
      value: "gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_4"
      value: "gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_5"
      value: "gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_6"
      value: "gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_7"
      value: "gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_8"
      value: "gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_469118_2287"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_469118___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_469118___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_469118___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_469118___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_while_cond_469835_226"
      input_arg {
        name: "net_while_net_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_net_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_while_less_net_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_net_while_cond_469835___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_net_while_cond_469835___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_net_while_cond_469835___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_net_while_cond_469835___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "net/while/Less"
      op: "Less"
      input: "net_while_placeholder"
      input: "net_while_less_net_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity"
      op: "Identity"
      input: "net/while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "net_while_identity"
      value: "net/while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_2450"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/ReadVariableOp"
      control_output: "gru_cell/ReadVariableOp_1"
      control_output: "gru_cell/ReadVariableOp_2"
      control_output: "gru_cell/ReadVariableOp_3"
      control_output: "gru_cell/ReadVariableOp_4"
      control_output: "gru_cell/ReadVariableOp_5"
      control_output: "gru_cell/ReadVariableOp_6"
      control_output: "gru_cell/ReadVariableOp_7"
      control_output: "gru_cell/ReadVariableOp_8"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Shape"
      op: "Shape"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like"
      op: "Fill"
      input: "gru_cell/ones_like/Shape:output:0"
      input: "gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Cast"
      op: "Cast"
      input: "gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout/Mul:z:0"
      input: "gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout_1/Mul:z:0"
      input: "gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "gru_cell/ones_like:output:0"
      input: "gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "gru_cell/dropout_2/Mul:z:0"
      input: "gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_1"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_2"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp:value:0"
      input: "gru_cell/strided_slice/stack:output:0"
      input: "gru_cell/strided_slice/stack_1:output:0"
      input: "gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul"
      op: "MatMul"
      input: "gru_cell/mul:z:0"
      input: "gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_1:value:0"
      input: "gru_cell/strided_slice_1/stack:output:0"
      input: "gru_cell/strided_slice_1/stack_1:output:0"
      input: "gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_1"
      op: "MatMul"
      input: "gru_cell/mul_1:z:0"
      input: "gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_2:value:0"
      input: "gru_cell/strided_slice_2/stack:output:0"
      input: "gru_cell/strided_slice_2/stack_1:output:0"
      input: "gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_2"
      op: "MatMul"
      input: "gru_cell/mul_2:z:0"
      input: "gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_3:value:0"
      input: "gru_cell/strided_slice_3/stack:output:0"
      input: "gru_cell/strided_slice_3/stack_1:output:0"
      input: "gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "gru_cell/MatMul:product:0"
      input: "gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_4:value:0"
      input: "gru_cell/strided_slice_4/stack:output:0"
      input: "gru_cell/strided_slice_4/stack_1:output:0"
      input: "gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "gru_cell/MatMul_1:product:0"
      input: "gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_5:value:0"
      input: "gru_cell/strided_slice_5/stack:output:0"
      input: "gru_cell/strided_slice_5/stack_1:output:0"
      input: "gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "gru_cell/MatMul_2:product:0"
      input: "gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_6:value:0"
      input: "gru_cell/strided_slice_6/stack:output:0"
      input: "gru_cell/strided_slice_6/stack_1:output:0"
      input: "gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_3"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_7:value:0"
      input: "gru_cell/strided_slice_7/stack:output:0"
      input: "gru_cell/strided_slice_7/stack_1:output:0"
      input: "gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_4"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add"
      op: "AddV2"
      input: "gru_cell/BiasAdd:output:0"
      input: "gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_3"
      op: "Mul"
      input: "gru_cell/add:z:0"
      input: "gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_1"
      op: "AddV2"
      input: "gru_cell/Mul_3:z:0"
      input: "gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_1:z:0"
      input: "gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value"
      op: "Maximum"
      input: "gru_cell/clip_by_value/Minimum:z:0"
      input: "gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_2"
      op: "AddV2"
      input: "gru_cell/BiasAdd_1:output:0"
      input: "gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_4"
      op: "Mul"
      input: "gru_cell/add_2:z:0"
      input: "gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_3"
      op: "AddV2"
      input: "gru_cell/Mul_4:z:0"
      input: "gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_3:z:0"
      input: "gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "gru_cell/clip_by_value_1/Minimum:z:0"
      input: "gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_5"
      op: "Mul"
      input: "gru_cell/clip_by_value_1:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_8:value:0"
      input: "gru_cell/strided_slice_8/stack:output:0"
      input: "gru_cell/strided_slice_8/stack_1:output:0"
      input: "gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_5"
      op: "MatMul"
      input: "gru_cell/mul_5:z:0"
      input: "gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add_4"
      op: "AddV2"
      input: "gru_cell/BiasAdd_2:output:0"
      input: "gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_6"
      op: "Mul"
      input: "gru_cell/clip_by_value:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/sub"
      op: "Sub"
      input: "gru_cell/sub/x:output:0"
      input: "gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_7"
      op: "Mul"
      input: "gru_cell/sub:z:0"
      input: "gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_5"
      op: "AddV2"
      input: "gru_cell/mul_6:z:0"
      input: "gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_readvariableop_resource"
      input: "gru_cell_readvariableop_3_resource"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_469119_212"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_469118_2287"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/ReadVariableOp"
      input: "^gru_cell/ReadVariableOp_1"
      input: "^gru_cell/ReadVariableOp_2"
      input: "^gru_cell/ReadVariableOp_3"
      input: "^gru_cell/ReadVariableOp_4"
      input: "^gru_cell/ReadVariableOp_5"
      input: "^gru_cell/ReadVariableOp_6"
      input: "^gru_cell/ReadVariableOp_7"
      input: "^gru_cell/ReadVariableOp_8"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/ReadVariableOp"
      value: "gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_1"
      value: "gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_2"
      value: "gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_3"
      value: "gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_4"
      value: "gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_5"
      value: "gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_6"
      value: "gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_7"
      value: "gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_8"
      value: "gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_869"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_468302"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_468304"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_468306"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/StatefulPartitionedCall"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "strided_slice_2:output:0"
      input: "zeros:output:0"
      input: "gru_cell_468302"
      input: "gru_cell_468304"
      input: "gru_cell_468306"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 2
            i: 3
            i: 4
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_gru_cell_layer_call_and_return_conditional_losses_787"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_468302"
      input: "gru_cell_468304"
      input: "gru_cell_468306"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_468314_813"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_468313_387"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/StatefulPartitionedCall"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/StatefulPartitionedCall"
      value: "gru_cell/StatefulPartitionedCall"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_470475_1288"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_470475___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_470475___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_470475___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_470475___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_signature_wrapper_3232"
      input_arg {
        name: "net_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net_input"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      input: "unknown_2"
      input: "unknown_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
            i: 4
            i: 5
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__wrapped_model_3222"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "net_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_fn_3530"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_3480"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_gru_cell_layer_call_and_return_conditional_losses_2866"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "states"
        type: DT_FLOAT
      }
      input_arg {
        name: "readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "ReadVariableOp"
      control_output: "ReadVariableOp_1"
      control_output: "ReadVariableOp_2"
      control_output: "ReadVariableOp_3"
      control_output: "ReadVariableOp_4"
      control_output: "ReadVariableOp_5"
      control_output: "ReadVariableOp_6"
      control_output: "ReadVariableOp_7"
      control_output: "ReadVariableOp_8"
    }
    node_def {
      name: "ones_like/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_like"
      op: "Fill"
      input: "ones_like/Shape:output:0"
      input: "ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "ones_like:output:0"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Shape"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Cast"
      op: "Cast"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dropout/Mul_1"
      op: "Mul"
      input: "dropout/Mul:z:0"
      input: "dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "dropout_1/Mul"
      op: "Mul"
      input: "ones_like:output:0"
      input: "dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_1/Shape"
      op: "Shape"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout_1/random_uniform/RandomUniform:output:0"
      input: "dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_1/Cast"
      op: "Cast"
      input: "dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dropout_1/Mul_1"
      op: "Mul"
      input: "dropout_1/Mul:z:0"
      input: "dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "dropout_2/Mul"
      op: "Mul"
      input: "ones_like:output:0"
      input: "dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_2/Shape"
      op: "Shape"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout_2/random_uniform/RandomUniform:output:0"
      input: "dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout_2/Cast"
      op: "Cast"
      input: "dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dropout_2/Mul_1"
      op: "Mul"
      input: "dropout_2/Mul:z:0"
      input: "dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "inputs"
      input: "dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "inputs"
      input: "dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "inputs"
      input: "dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "ReadVariableOp:value:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "mul:z:0"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "ReadVariableOp_1:value:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "mul_1:z:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "ReadVariableOp_2:value:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_2"
      op: "MatMul"
      input: "mul_2:z:0"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "ReadVariableOp_3:value:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4"
      op: "StridedSlice"
      input: "ReadVariableOp_4:value:0"
      input: "strided_slice_4/stack:output:0"
      input: "strided_slice_4/stack_1:output:0"
      input: "strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_1"
      op: "BiasAdd"
      input: "MatMul_1:product:0"
      input: "strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5"
      op: "StridedSlice"
      input: "ReadVariableOp_5:value:0"
      input: "strided_slice_5/stack:output:0"
      input: "strided_slice_5/stack_1:output:0"
      input: "strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_2"
      op: "BiasAdd"
      input: "MatMul_2:product:0"
      input: "strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6"
      op: "StridedSlice"
      input: "ReadVariableOp_6:value:0"
      input: "strided_slice_6/stack:output:0"
      input: "strided_slice_6/stack_1:output:0"
      input: "strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_3"
      op: "MatMul"
      input: "states"
      input: "strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7"
      op: "StridedSlice"
      input: "ReadVariableOp_7:value:0"
      input: "strided_slice_7/stack:output:0"
      input: "strided_slice_7/stack_1:output:0"
      input: "strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_4"
      op: "MatMul"
      input: "states"
      input: "strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "BiasAdd:output:0"
      input: "MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_3"
      op: "Mul"
      input: "add:z:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_1"
      op: "AddV2"
      input: "Mul_3:z:0"
      input: "Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum"
      op: "Minimum"
      input: "Add_1:z:0"
      input: "clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value"
      op: "Maximum"
      input: "clip_by_value/Minimum:z:0"
      input: "clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "BiasAdd_1:output:0"
      input: "MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_4"
      op: "Mul"
      input: "add_2:z:0"
      input: "Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_3"
      op: "AddV2"
      input: "Mul_4:z:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum"
      op: "Minimum"
      input: "Add_3:z:0"
      input: "clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1"
      op: "Maximum"
      input: "clip_by_value_1/Minimum:z:0"
      input: "clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_5"
      op: "Mul"
      input: "clip_by_value_1:z:0"
      input: "states"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8"
      op: "StridedSlice"
      input: "ReadVariableOp_8:value:0"
      input: "strided_slice_8/stack:output:0"
      input: "strided_slice_8/stack_1:output:0"
      input: "strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_5"
      op: "MatMul"
      input: "mul_5:z:0"
      input: "strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add_4"
      op: "AddV2"
      input: "BiasAdd_2:output:0"
      input: "MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_6"
      op: "Mul"
      input: "clip_by_value:z:0"
      input: "states"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "sub/x:output:0"
      input: "clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_7"
      op: "Mul"
      input: "sub:z:0"
      input: "add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_5"
      op: "AddV2"
      input: "mul_6:z:0"
      input: "mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^ReadVariableOp"
      input: "^ReadVariableOp_1"
      input: "^ReadVariableOp_2"
      input: "^ReadVariableOp_3"
      input: "^ReadVariableOp_4"
      input: "^ReadVariableOp_5"
      input: "^ReadVariableOp_6"
      input: "^ReadVariableOp_7"
      input: "^ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "ReadVariableOp"
      value: "ReadVariableOp"
    }
    control_ret {
      key: "ReadVariableOp_1"
      value: "ReadVariableOp_1"
    }
    control_ret {
      key: "ReadVariableOp_2"
      value: "ReadVariableOp_2"
    }
    control_ret {
      key: "ReadVariableOp_3"
      value: "ReadVariableOp_3"
    }
    control_ret {
      key: "ReadVariableOp_4"
      value: "ReadVariableOp_4"
    }
    control_ret {
      key: "ReadVariableOp_5"
      value: "ReadVariableOp_5"
    }
    control_ret {
      key: "ReadVariableOp_6"
      value: "ReadVariableOp_6"
    }
    control_ret {
      key: "ReadVariableOp_7"
      value: "ReadVariableOp_7"
    }
    control_ret {
      key: "ReadVariableOp_8"
      value: "ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "states"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_470761_1559"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_470761___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_470761___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_470761___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_470761___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_2480"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_469315"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_469317"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_469319"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_469322"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_469324"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/StatefulPartitionedCall"
      control_output: "net/StatefulPartitionedCall"
    }
    node_def {
      name: "net/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "net_469315"
      input: "net_469317"
      input: "net_469319"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_2450"
          }
        }
      }
    }
    node_def {
      name: "dense/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net/StatefulPartitionedCall:output:0"
      input: "dense_469322"
      input: "dense_469324"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_layer_call_and_return_conditional_losses_1267"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^dense/StatefulPartitionedCall"
      input: "^net/StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense/StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "dense/StatefulPartitionedCall"
      value: "dense/StatefulPartitionedCall"
    }
    control_ret {
      key: "net/StatefulPartitionedCall"
      value: "net/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_1191"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/BiasAdd/ReadVariableOp"
      control_output: "dense/MatMul/ReadVariableOp"
      control_output: "net/gru_cell/ReadVariableOp"
      control_output: "net/gru_cell/ReadVariableOp_1"
      control_output: "net/gru_cell/ReadVariableOp_2"
      control_output: "net/gru_cell/ReadVariableOp_3"
      control_output: "net/gru_cell/ReadVariableOp_4"
      control_output: "net/gru_cell/ReadVariableOp_5"
      control_output: "net/gru_cell/ReadVariableOp_6"
      control_output: "net/gru_cell/ReadVariableOp_7"
      control_output: "net/gru_cell/ReadVariableOp_8"
      control_output: "net/while"
    }
    node_def {
      name: "net/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice"
      op: "StridedSlice"
      input: "net/Shape:output:0"
      input: "net/strided_slice/stack:output:0"
      input: "net/strided_slice/stack_1:output:0"
      input: "net/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/zeros/packed"
      op: "Pack"
      input: "net/strided_slice:output:0"
      input: "net/zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/zeros"
      op: "Fill"
      input: "net/zeros/packed:output:0"
      input: "net/zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/transpose"
      op: "Transpose"
      input: "inputs"
      input: "net/transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/Shape_1"
      op: "Shape"
      input: "net/transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_1"
      op: "StridedSlice"
      input: "net/Shape_1:output:0"
      input: "net/strided_slice_1/stack:output:0"
      input: "net/strided_slice_1/stack_1:output:0"
      input: "net/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2"
      op: "TensorListReserve"
      input: "net/TensorArrayV2/element_shape:output:0"
      input: "net/strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "net/transpose:y:0"
      input: "net/TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2"
      op: "StridedSlice"
      input: "net/transpose:y:0"
      input: "net/strided_slice_2/stack:output:0"
      input: "net/strided_slice_2/stack_1:output:0"
      input: "net/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "net/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/ones_like"
      op: "Fill"
      input: "net/gru_cell/ones_like/Shape:output:0"
      input: "net/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/Mul"
      op: "Mul"
      input: "net/gru_cell/ones_like:output:0"
      input: "net/gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/Shape"
      op: "Shape"
      input: "net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "net/gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "net/gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "net/gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/Cast"
      op: "Cast"
      input: "net/gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "net/gru_cell/dropout/Mul:z:0"
      input: "net/gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "net/gru_cell/ones_like:output:0"
      input: "net/gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "net/gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "net/gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "net/gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "net/gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "net/gru_cell/dropout_1/Mul:z:0"
      input: "net/gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "net/gru_cell/ones_like:output:0"
      input: "net/gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "net/gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "net/gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "net/gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "net/gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "net/gru_cell/dropout_2/Mul:z:0"
      input: "net/gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul"
      op: "Mul"
      input: "net/strided_slice_2:output:0"
      input: "net/gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_1"
      op: "Mul"
      input: "net/strided_slice_2:output:0"
      input: "net/gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_2"
      op: "Mul"
      input: "net/strided_slice_2:output:0"
      input: "net/gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp:value:0"
      input: "net/gru_cell/strided_slice/stack:output:0"
      input: "net/gru_cell/strided_slice/stack_1:output:0"
      input: "net/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul"
      op: "MatMul"
      input: "net/gru_cell/mul:z:0"
      input: "net/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_1:value:0"
      input: "net/gru_cell/strided_slice_1/stack:output:0"
      input: "net/gru_cell/strided_slice_1/stack_1:output:0"
      input: "net/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_1"
      op: "MatMul"
      input: "net/gru_cell/mul_1:z:0"
      input: "net/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_2:value:0"
      input: "net/gru_cell/strided_slice_2/stack:output:0"
      input: "net/gru_cell/strided_slice_2/stack_1:output:0"
      input: "net/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_2"
      op: "MatMul"
      input: "net/gru_cell/mul_2:z:0"
      input: "net/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_3:value:0"
      input: "net/gru_cell/strided_slice_3/stack:output:0"
      input: "net/gru_cell/strided_slice_3/stack_1:output:0"
      input: "net/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "net/gru_cell/MatMul:product:0"
      input: "net/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_4:value:0"
      input: "net/gru_cell/strided_slice_4/stack:output:0"
      input: "net/gru_cell/strided_slice_4/stack_1:output:0"
      input: "net/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "net/gru_cell/MatMul_1:product:0"
      input: "net/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_5:value:0"
      input: "net/gru_cell/strided_slice_5/stack:output:0"
      input: "net/gru_cell/strided_slice_5/stack_1:output:0"
      input: "net/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "net/gru_cell/MatMul_2:product:0"
      input: "net/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_6:value:0"
      input: "net/gru_cell/strided_slice_6/stack:output:0"
      input: "net/gru_cell/strided_slice_6/stack_1:output:0"
      input: "net/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_3"
      op: "MatMul"
      input: "net/zeros:output:0"
      input: "net/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_7:value:0"
      input: "net/gru_cell/strided_slice_7/stack:output:0"
      input: "net/gru_cell/strided_slice_7/stack_1:output:0"
      input: "net/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_4"
      op: "MatMul"
      input: "net/zeros:output:0"
      input: "net/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/add"
      op: "AddV2"
      input: "net/gru_cell/BiasAdd:output:0"
      input: "net/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Mul_3"
      op: "Mul"
      input: "net/gru_cell/add:z:0"
      input: "net/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Add_1"
      op: "AddV2"
      input: "net/gru_cell/Mul_3:z:0"
      input: "net/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "net/gru_cell/Add_1:z:0"
      input: "net/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value"
      op: "Maximum"
      input: "net/gru_cell/clip_by_value/Minimum:z:0"
      input: "net/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/add_2"
      op: "AddV2"
      input: "net/gru_cell/BiasAdd_1:output:0"
      input: "net/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Mul_4"
      op: "Mul"
      input: "net/gru_cell/add_2:z:0"
      input: "net/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Add_3"
      op: "AddV2"
      input: "net/gru_cell/Mul_4:z:0"
      input: "net/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "net/gru_cell/Add_3:z:0"
      input: "net/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "net/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "net/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_5"
      op: "Mul"
      input: "net/gru_cell/clip_by_value_1:z:0"
      input: "net/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_8:value:0"
      input: "net/gru_cell/strided_slice_8/stack:output:0"
      input: "net/gru_cell/strided_slice_8/stack_1:output:0"
      input: "net/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_5"
      op: "MatMul"
      input: "net/gru_cell/mul_5:z:0"
      input: "net/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/add_4"
      op: "AddV2"
      input: "net/gru_cell/BiasAdd_2:output:0"
      input: "net/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_6"
      op: "Mul"
      input: "net/gru_cell/clip_by_value:z:0"
      input: "net/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/sub"
      op: "Sub"
      input: "net/gru_cell/sub/x:output:0"
      input: "net/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_7"
      op: "Mul"
      input: "net/gru_cell/sub:z:0"
      input: "net/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/add_5"
      op: "AddV2"
      input: "net/gru_cell/mul_6:z:0"
      input: "net/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2_1"
      op: "TensorListReserve"
      input: "net/TensorArrayV2_1/element_shape:output:0"
      input: "net/strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "net/while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while"
      op: "While"
      input: "net/while/loop_counter:output:0"
      input: "net/while/maximum_iterations:output:0"
      input: "net/time:output:0"
      input: "net/TensorArrayV2_1:handle:0"
      input: "net/zeros:output:0"
      input: "net/strided_slice_1:output:0"
      input: "net/TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "net_gru_cell_readvariableop_resource"
      input: "net_gru_cell_readvariableop_3_resource"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_net_while_body_469836_1021"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_net_while_cond_469835_226"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "net/while:output:3"
      input: "net/TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "net/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_3"
      op: "StridedSlice"
      input: "net/TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "net/strided_slice_3/stack:output:0"
      input: "net/strided_slice_3/stack_1:output:0"
      input: "net/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/transpose_1"
      op: "Transpose"
      input: "net/TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "net/transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dense/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dense/MatMul"
      op: "MatMul"
      input: "net/strided_slice_3:output:0"
      input: "dense/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dense/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dense/BiasAdd"
      op: "BiasAdd"
      input: "dense/MatMul:product:0"
      input: "dense/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "dense/Sigmoid"
      op: "Sigmoid"
      input: "dense/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^dense/BiasAdd/ReadVariableOp"
      input: "^dense/MatMul/ReadVariableOp"
      input: "^net/gru_cell/ReadVariableOp"
      input: "^net/gru_cell/ReadVariableOp_1"
      input: "^net/gru_cell/ReadVariableOp_2"
      input: "^net/gru_cell/ReadVariableOp_3"
      input: "^net/gru_cell/ReadVariableOp_4"
      input: "^net/gru_cell/ReadVariableOp_5"
      input: "^net/gru_cell/ReadVariableOp_6"
      input: "^net/gru_cell/ReadVariableOp_7"
      input: "^net/gru_cell/ReadVariableOp_8"
      input: "^net/while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense/Sigmoid:y:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "dense/BiasAdd/ReadVariableOp"
      value: "dense/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense/MatMul/ReadVariableOp"
      value: "dense/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp"
      value: "net/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_1"
      value: "net/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_2"
      value: "net/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_3"
      value: "net/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_4"
      value: "net/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_5"
      value: "net/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_6"
      value: "net/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_7"
      value: "net/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_8"
      value: "net/gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "net/while"
      value: "net/while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_cond_468770_79"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_less_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_cond_468770___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_while_cond_468770___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_468770___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_while_cond_468770___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "while/Less"
      op: "Less"
      input: "while_placeholder"
      input: "while_less_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_while_body_470476_373"
      input_arg {
        name: "while_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "while_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "while_strided_slice_1_0"
        type: DT_INT32
      }
      input_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "while_gru_cell_readvariableop_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_3_resource_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "while_gru_cell_readvariableop_6_resource_0"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_identity"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_2"
        type: DT_INT32
      }
      output_arg {
        name: "while_identity_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "while_strided_slice_1"
        type: DT_INT32
      }
      output_arg {
        name: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "while_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "while_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      is_stateful: true
      control_output: "while/gru_cell/ReadVariableOp"
      control_output: "while/gru_cell/ReadVariableOp_1"
      control_output: "while/gru_cell/ReadVariableOp_2"
      control_output: "while/gru_cell/ReadVariableOp_3"
      control_output: "while/gru_cell/ReadVariableOp_4"
      control_output: "while/gru_cell/ReadVariableOp_5"
      control_output: "while/gru_cell/ReadVariableOp_6"
      control_output: "while/gru_cell/ReadVariableOp_7"
      control_output: "while/gru_cell/ReadVariableOp_8"
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
      input: "while_placeholder"
      input: "while/TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/ones_like"
      op: "Fill"
      input: "while/gru_cell/ones_like/Shape:output:0"
      input: "while/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout/Mul:z:0"
      input: "while/gru_cell/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout_1/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout_1/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout_1/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout_1/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_1/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout_1/Mul:z:0"
      input: "while/gru_cell/dropout_1/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Mul"
      op: "Mul"
      input: "while/gru_cell/ones_like:output:0"
      input: "while/gru_cell/dropout_2/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Shape"
      op: "Shape"
      input: "while/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "while/gru_cell/dropout_2/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/GreaterEqual"
      op: "GreaterEqual"
      input: "while/gru_cell/dropout_2/random_uniform/RandomUniform:output:0"
      input: "while/gru_cell/dropout_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Cast"
      op: "Cast"
      input: "while/gru_cell/dropout_2/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/dropout_2/Mul_1"
      op: "Mul"
      input: "while/gru_cell/dropout_2/Mul:z:0"
      input: "while/gru_cell/dropout_2/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_1"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout_1/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_2"
      op: "Mul"
      input: "while/TensorArrayV2Read/TensorListGetItem:item:0"
      input: "while/gru_cell/dropout_2/Mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp:value:0"
      input: "while/gru_cell/strided_slice/stack:output:0"
      input: "while/gru_cell/strided_slice/stack_1:output:0"
      input: "while/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul"
      op: "MatMul"
      input: "while/gru_cell/mul:z:0"
      input: "while/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_1:value:0"
      input: "while/gru_cell/strided_slice_1/stack:output:0"
      input: "while/gru_cell/strided_slice_1/stack_1:output:0"
      input: "while/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_1"
      op: "MatMul"
      input: "while/gru_cell/mul_1:z:0"
      input: "while/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_2:value:0"
      input: "while/gru_cell/strided_slice_2/stack:output:0"
      input: "while/gru_cell/strided_slice_2/stack_1:output:0"
      input: "while/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_2"
      op: "MatMul"
      input: "while/gru_cell/mul_2:z:0"
      input: "while/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_3:value:0"
      input: "while/gru_cell/strided_slice_3/stack:output:0"
      input: "while/gru_cell/strided_slice_3/stack_1:output:0"
      input: "while/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul:product:0"
      input: "while/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_4:value:0"
      input: "while/gru_cell/strided_slice_4/stack:output:0"
      input: "while/gru_cell/strided_slice_4/stack_1:output:0"
      input: "while/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_1:product:0"
      input: "while/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_3_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_5:value:0"
      input: "while/gru_cell/strided_slice_5/stack:output:0"
      input: "while/gru_cell/strided_slice_5/stack_1:output:0"
      input: "while/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "while/gru_cell/MatMul_2:product:0"
      input: "while/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_6:value:0"
      input: "while/gru_cell/strided_slice_6/stack:output:0"
      input: "while/gru_cell/strided_slice_6/stack_1:output:0"
      input: "while/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_3"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_7:value:0"
      input: "while/gru_cell/strided_slice_7/stack:output:0"
      input: "while/gru_cell/strided_slice_7/stack_1:output:0"
      input: "while/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_4"
      op: "MatMul"
      input: "while_placeholder_2"
      input: "while/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd:output:0"
      input: "while/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_3"
      op: "Mul"
      input: "while/gru_cell/add:z:0"
      input: "while/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_1"
      op: "AddV2"
      input: "while/gru_cell/Mul_3:z:0"
      input: "while/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_1:z:0"
      input: "while/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value/Minimum:z:0"
      input: "while/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_2"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_1:output:0"
      input: "while/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/Mul_4"
      op: "Mul"
      input: "while/gru_cell/add_2:z:0"
      input: "while/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/Add_3"
      op: "AddV2"
      input: "while/gru_cell/Mul_4:z:0"
      input: "while/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "while/gru_cell/Add_3:z:0"
      input: "while/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "while/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "while/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_5"
      op: "Mul"
      input: "while/gru_cell/clip_by_value_1:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "while_gru_cell_readvariableop_6_resource_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "while/gru_cell/ReadVariableOp_8:value:0"
      input: "while/gru_cell/strided_slice_8/stack:output:0"
      input: "while/gru_cell/strided_slice_8/stack_1:output:0"
      input: "while/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "while/gru_cell/MatMul_5"
      op: "MatMul"
      input: "while/gru_cell/mul_5:z:0"
      input: "while/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_4"
      op: "AddV2"
      input: "while/gru_cell/BiasAdd_2:output:0"
      input: "while/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_6"
      op: "Mul"
      input: "while/gru_cell/clip_by_value:z:0"
      input: "while_placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "while/gru_cell/sub"
      op: "Sub"
      input: "while/gru_cell/sub/x:output:0"
      input: "while/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/mul_7"
      op: "Mul"
      input: "while/gru_cell/sub:z:0"
      input: "while/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/gru_cell/add_5"
      op: "AddV2"
      input: "while/gru_cell/mul_6:z:0"
      input: "while/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "while/TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "while_placeholder_1"
      input: "while_placeholder"
      input: "while/gru_cell/add_5:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add"
      op: "AddV2"
      input: "while_placeholder"
      input: "while/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "while/add_1"
      op: "AddV2"
      input: "while_while_loop_counter"
      input: "while/add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/NoOp"
      op: "NoOp"
      input: "^while/gru_cell/ReadVariableOp"
      input: "^while/gru_cell/ReadVariableOp_1"
      input: "^while/gru_cell/ReadVariableOp_2"
      input: "^while/gru_cell/ReadVariableOp_3"
      input: "^while/gru_cell/ReadVariableOp_4"
      input: "^while/gru_cell/ReadVariableOp_5"
      input: "^while/gru_cell/ReadVariableOp_6"
      input: "^while/gru_cell/ReadVariableOp_7"
      input: "^while/gru_cell/ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "while/Identity"
      op: "Identity"
      input: "while/add_1:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_1"
      op: "Identity"
      input: "while_while_maximum_iterations"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_2"
      op: "Identity"
      input: "while/add:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "while/Identity_3"
      op: "Identity"
      input: "while/TensorArrayV2Write/TensorListSetItem:output_handle:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "while/Identity_4"
      op: "Identity"
      input: "while/gru_cell/add_5:z:0"
      input: "^while/NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "while_gru_cell_readvariableop_3_resource"
      value: "while_gru_cell_readvariableop_3_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_6_resource"
      value: "while_gru_cell_readvariableop_6_resource_0"
    }
    ret {
      key: "while_gru_cell_readvariableop_resource"
      value: "while_gru_cell_readvariableop_resource_0"
    }
    ret {
      key: "while_identity"
      value: "while/Identity:output:0"
    }
    ret {
      key: "while_identity_1"
      value: "while/Identity_1:output:0"
    }
    ret {
      key: "while_identity_2"
      value: "while/Identity_2:output:0"
    }
    ret {
      key: "while_identity_3"
      value: "while/Identity_3:output:0"
    }
    ret {
      key: "while_identity_4"
      value: "while/Identity_4:output:0"
    }
    ret {
      key: "while_strided_slice_1"
      value: "while_strided_slice_1_0"
    }
    ret {
      key: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor"
      value: "while_tensorarrayv2read_tensorlistgetitem_tensorarrayunstack_tensorlistfromtensor_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp"
      value: "while/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_1"
      value: "while/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_2"
      value: "while/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_3"
      value: "while/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_4"
      value: "while/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_5"
      value: "while/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_6"
      value: "while/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_7"
      value: "while/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "while/gru_cell/ReadVariableOp_8"
      value: "while/gru_cell/ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_2959"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_468562"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_468564"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_468566"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/StatefulPartitionedCall"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "strided_slice_2:output:0"
      input: "zeros:output:0"
      input: "gru_cell_468562"
      input: "gru_cell_468564"
      input: "gru_cell_468566"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 2
            i: 3
            i: 4
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_gru_cell_layer_call_and_return_conditional_losses_2866"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_468562"
      input: "gru_cell_468564"
      input: "gru_cell_468566"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_468574_2903"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_468573_1712"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/StatefulPartitionedCall"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/StatefulPartitionedCall"
      value: "gru_cell/StatefulPartitionedCall"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_gru_cell_layer_call_and_return_conditional_losses_1545"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "states_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "ReadVariableOp"
      control_output: "ReadVariableOp_1"
      control_output: "ReadVariableOp_2"
      control_output: "ReadVariableOp_3"
      control_output: "ReadVariableOp_4"
      control_output: "ReadVariableOp_5"
      control_output: "ReadVariableOp_6"
      control_output: "ReadVariableOp_7"
      control_output: "ReadVariableOp_8"
    }
    node_def {
      name: "ones_like/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_like"
      op: "Fill"
      input: "ones_like/Shape:output:0"
      input: "ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "inputs"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "inputs"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "inputs"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "ReadVariableOp:value:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "mul:z:0"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "ReadVariableOp_1:value:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "mul_1:z:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "ReadVariableOp_2:value:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_2"
      op: "MatMul"
      input: "mul_2:z:0"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "ReadVariableOp_3:value:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4"
      op: "StridedSlice"
      input: "ReadVariableOp_4:value:0"
      input: "strided_slice_4/stack:output:0"
      input: "strided_slice_4/stack_1:output:0"
      input: "strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_1"
      op: "BiasAdd"
      input: "MatMul_1:product:0"
      input: "strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5"
      op: "StridedSlice"
      input: "ReadVariableOp_5:value:0"
      input: "strided_slice_5/stack:output:0"
      input: "strided_slice_5/stack_1:output:0"
      input: "strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_2"
      op: "BiasAdd"
      input: "MatMul_2:product:0"
      input: "strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6"
      op: "StridedSlice"
      input: "ReadVariableOp_6:value:0"
      input: "strided_slice_6/stack:output:0"
      input: "strided_slice_6/stack_1:output:0"
      input: "strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_3"
      op: "MatMul"
      input: "states_0"
      input: "strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7"
      op: "StridedSlice"
      input: "ReadVariableOp_7:value:0"
      input: "strided_slice_7/stack:output:0"
      input: "strided_slice_7/stack_1:output:0"
      input: "strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_4"
      op: "MatMul"
      input: "states_0"
      input: "strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "BiasAdd:output:0"
      input: "MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_3"
      op: "Mul"
      input: "add:z:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_1"
      op: "AddV2"
      input: "Mul_3:z:0"
      input: "Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum"
      op: "Minimum"
      input: "Add_1:z:0"
      input: "clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value"
      op: "Maximum"
      input: "clip_by_value/Minimum:z:0"
      input: "clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "BiasAdd_1:output:0"
      input: "MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_4"
      op: "Mul"
      input: "add_2:z:0"
      input: "Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_3"
      op: "AddV2"
      input: "Mul_4:z:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum"
      op: "Minimum"
      input: "Add_3:z:0"
      input: "clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1"
      op: "Maximum"
      input: "clip_by_value_1/Minimum:z:0"
      input: "clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_5"
      op: "Mul"
      input: "clip_by_value_1:z:0"
      input: "states_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8"
      op: "StridedSlice"
      input: "ReadVariableOp_8:value:0"
      input: "strided_slice_8/stack:output:0"
      input: "strided_slice_8/stack_1:output:0"
      input: "strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_5"
      op: "MatMul"
      input: "mul_5:z:0"
      input: "strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add_4"
      op: "AddV2"
      input: "BiasAdd_2:output:0"
      input: "MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_6"
      op: "Mul"
      input: "clip_by_value:z:0"
      input: "states_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "sub/x:output:0"
      input: "clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_7"
      op: "Mul"
      input: "sub:z:0"
      input: "add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_5"
      op: "AddV2"
      input: "mul_6:z:0"
      input: "mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^ReadVariableOp"
      input: "^ReadVariableOp_1"
      input: "^ReadVariableOp_2"
      input: "^ReadVariableOp_3"
      input: "^ReadVariableOp_4"
      input: "^ReadVariableOp_5"
      input: "^ReadVariableOp_6"
      input: "^ReadVariableOp_7"
      input: "^ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "ReadVariableOp"
      value: "ReadVariableOp"
    }
    control_ret {
      key: "ReadVariableOp_1"
      value: "ReadVariableOp_1"
    }
    control_ret {
      key: "ReadVariableOp_2"
      value: "ReadVariableOp_2"
    }
    control_ret {
      key: "ReadVariableOp_3"
      value: "ReadVariableOp_3"
    }
    control_ret {
      key: "ReadVariableOp_4"
      value: "ReadVariableOp_4"
    }
    control_ret {
      key: "ReadVariableOp_5"
      value: "ReadVariableOp_5"
    }
    control_ret {
      key: "ReadVariableOp_6"
      value: "ReadVariableOp_6"
    }
    control_ret {
      key: "ReadVariableOp_7"
      value: "ReadVariableOp_7"
    }
    control_ret {
      key: "ReadVariableOp_8"
      value: "ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "states/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_and_return_conditional_losses_2085"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "dense/BiasAdd/ReadVariableOp"
      control_output: "dense/MatMul/ReadVariableOp"
      control_output: "net/gru_cell/ReadVariableOp"
      control_output: "net/gru_cell/ReadVariableOp_1"
      control_output: "net/gru_cell/ReadVariableOp_2"
      control_output: "net/gru_cell/ReadVariableOp_3"
      control_output: "net/gru_cell/ReadVariableOp_4"
      control_output: "net/gru_cell/ReadVariableOp_5"
      control_output: "net/gru_cell/ReadVariableOp_6"
      control_output: "net/gru_cell/ReadVariableOp_7"
      control_output: "net/gru_cell/ReadVariableOp_8"
      control_output: "net/while"
    }
    node_def {
      name: "net/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice"
      op: "StridedSlice"
      input: "net/Shape:output:0"
      input: "net/strided_slice/stack:output:0"
      input: "net/strided_slice/stack_1:output:0"
      input: "net/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/zeros/packed"
      op: "Pack"
      input: "net/strided_slice:output:0"
      input: "net/zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/zeros"
      op: "Fill"
      input: "net/zeros/packed:output:0"
      input: "net/zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/transpose"
      op: "Transpose"
      input: "inputs"
      input: "net/transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/Shape_1"
      op: "Shape"
      input: "net/transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_1"
      op: "StridedSlice"
      input: "net/Shape_1:output:0"
      input: "net/strided_slice_1/stack:output:0"
      input: "net/strided_slice_1/stack_1:output:0"
      input: "net/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2"
      op: "TensorListReserve"
      input: "net/TensorArrayV2/element_shape:output:0"
      input: "net/strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "net/transpose:y:0"
      input: "net/TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_2"
      op: "StridedSlice"
      input: "net/transpose:y:0"
      input: "net/strided_slice_2/stack:output:0"
      input: "net/strided_slice_2/stack_1:output:0"
      input: "net/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/gru_cell/ones_like/Shape"
      op: "Shape"
      input: "net/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/ones_like"
      op: "Fill"
      input: "net/gru_cell/ones_like/Shape:output:0"
      input: "net/gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul"
      op: "Mul"
      input: "net/strided_slice_2:output:0"
      input: "net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_1"
      op: "Mul"
      input: "net/strided_slice_2:output:0"
      input: "net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_2"
      op: "Mul"
      input: "net/strided_slice_2:output:0"
      input: "net/gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp:value:0"
      input: "net/gru_cell/strided_slice/stack:output:0"
      input: "net/gru_cell/strided_slice/stack_1:output:0"
      input: "net/gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul"
      op: "MatMul"
      input: "net/gru_cell/mul:z:0"
      input: "net/gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_1:value:0"
      input: "net/gru_cell/strided_slice_1/stack:output:0"
      input: "net/gru_cell/strided_slice_1/stack_1:output:0"
      input: "net/gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_1"
      op: "MatMul"
      input: "net/gru_cell/mul_1:z:0"
      input: "net/gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_2:value:0"
      input: "net/gru_cell/strided_slice_2/stack:output:0"
      input: "net/gru_cell/strided_slice_2/stack_1:output:0"
      input: "net/gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_2"
      op: "MatMul"
      input: "net/gru_cell/mul_2:z:0"
      input: "net/gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_3:value:0"
      input: "net/gru_cell/strided_slice_3/stack:output:0"
      input: "net/gru_cell/strided_slice_3/stack_1:output:0"
      input: "net/gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "net/gru_cell/MatMul:product:0"
      input: "net/gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_4:value:0"
      input: "net/gru_cell/strided_slice_4/stack:output:0"
      input: "net/gru_cell/strided_slice_4/stack_1:output:0"
      input: "net/gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "net/gru_cell/MatMul_1:product:0"
      input: "net/gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_5:value:0"
      input: "net/gru_cell/strided_slice_5/stack:output:0"
      input: "net/gru_cell/strided_slice_5/stack_1:output:0"
      input: "net/gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "net/gru_cell/MatMul_2:product:0"
      input: "net/gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_6:value:0"
      input: "net/gru_cell/strided_slice_6/stack:output:0"
      input: "net/gru_cell/strided_slice_6/stack_1:output:0"
      input: "net/gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_3"
      op: "MatMul"
      input: "net/zeros:output:0"
      input: "net/gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_7:value:0"
      input: "net/gru_cell/strided_slice_7/stack:output:0"
      input: "net/gru_cell/strided_slice_7/stack_1:output:0"
      input: "net/gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_4"
      op: "MatMul"
      input: "net/zeros:output:0"
      input: "net/gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/add"
      op: "AddV2"
      input: "net/gru_cell/BiasAdd:output:0"
      input: "net/gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Mul_3"
      op: "Mul"
      input: "net/gru_cell/add:z:0"
      input: "net/gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Add_1"
      op: "AddV2"
      input: "net/gru_cell/Mul_3:z:0"
      input: "net/gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "net/gru_cell/Add_1:z:0"
      input: "net/gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value"
      op: "Maximum"
      input: "net/gru_cell/clip_by_value/Minimum:z:0"
      input: "net/gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/add_2"
      op: "AddV2"
      input: "net/gru_cell/BiasAdd_1:output:0"
      input: "net/gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/Mul_4"
      op: "Mul"
      input: "net/gru_cell/add_2:z:0"
      input: "net/gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/Add_3"
      op: "AddV2"
      input: "net/gru_cell/Mul_4:z:0"
      input: "net/gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "net/gru_cell/Add_3:z:0"
      input: "net/gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "net/gru_cell/clip_by_value_1/Minimum:z:0"
      input: "net/gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_5"
      op: "Mul"
      input: "net/gru_cell/clip_by_value_1:z:0"
      input: "net/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "net/gru_cell/ReadVariableOp_8:value:0"
      input: "net/gru_cell/strided_slice_8/stack:output:0"
      input: "net/gru_cell/strided_slice_8/stack_1:output:0"
      input: "net/gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "net/gru_cell/MatMul_5"
      op: "MatMul"
      input: "net/gru_cell/mul_5:z:0"
      input: "net/gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "net/gru_cell/add_4"
      op: "AddV2"
      input: "net/gru_cell/BiasAdd_2:output:0"
      input: "net/gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_6"
      op: "Mul"
      input: "net/gru_cell/clip_by_value:z:0"
      input: "net/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "net/gru_cell/sub"
      op: "Sub"
      input: "net/gru_cell/sub/x:output:0"
      input: "net/gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/mul_7"
      op: "Mul"
      input: "net/gru_cell/sub:z:0"
      input: "net/gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/gru_cell/add_5"
      op: "AddV2"
      input: "net/gru_cell/mul_6:z:0"
      input: "net/gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2_1"
      op: "TensorListReserve"
      input: "net/TensorArrayV2_1/element_shape:output:0"
      input: "net/strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "net/time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "net/while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/while"
      op: "While"
      input: "net/while/loop_counter:output:0"
      input: "net/while/maximum_iterations:output:0"
      input: "net/time:output:0"
      input: "net/TensorArrayV2_1:handle:0"
      input: "net/zeros:output:0"
      input: "net/strided_slice_1:output:0"
      input: "net/TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "net_gru_cell_readvariableop_resource"
      input: "net_gru_cell_readvariableop_3_resource"
      input: "net_gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_net_while_body_469543_1939"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_net_while_cond_469542_437"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "net/while:output:3"
      input: "net/TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "net/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "net/strided_slice_3"
      op: "StridedSlice"
      input: "net/TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "net/strided_slice_3/stack:output:0"
      input: "net/strided_slice_3/stack_1:output:0"
      input: "net/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "net/transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "net/transpose_1"
      op: "Transpose"
      input: "net/TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "net/transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "dense/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dense/MatMul"
      op: "MatMul"
      input: "net/strided_slice_3:output:0"
      input: "dense/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "dense/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dense/BiasAdd"
      op: "BiasAdd"
      input: "dense/MatMul:product:0"
      input: "dense/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "dense/Sigmoid"
      op: "Sigmoid"
      input: "dense/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^dense/BiasAdd/ReadVariableOp"
      input: "^dense/MatMul/ReadVariableOp"
      input: "^net/gru_cell/ReadVariableOp"
      input: "^net/gru_cell/ReadVariableOp_1"
      input: "^net/gru_cell/ReadVariableOp_2"
      input: "^net/gru_cell/ReadVariableOp_3"
      input: "^net/gru_cell/ReadVariableOp_4"
      input: "^net/gru_cell/ReadVariableOp_5"
      input: "^net/gru_cell/ReadVariableOp_6"
      input: "^net/gru_cell/ReadVariableOp_7"
      input: "^net/gru_cell/ReadVariableOp_8"
      input: "^net/while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dense/Sigmoid:y:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "dense/BiasAdd/ReadVariableOp"
      value: "dense/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense/MatMul/ReadVariableOp"
      value: "dense/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp"
      value: "net/gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_1"
      value: "net/gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_2"
      value: "net/gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_3"
      value: "net/gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_4"
      value: "net/gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_5"
      value: "net/gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_6"
      value: "net/gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_7"
      value: "net/gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "net/gru_cell/ReadVariableOp_8"
      value: "net/gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "net/while"
      value: "net/while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_layer_call_fn_3512"
      input_arg {
        name: "net_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "net_input"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      input: "unknown_2"
      input: "unknown_3"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
            i: 4
            i: 5
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_layer_call_and_return_conditional_losses_3502"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "net_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_gru_cell_layer_call_and_return_conditional_losses_787"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "states"
        type: DT_FLOAT
      }
      input_arg {
        name: "readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "ReadVariableOp"
      control_output: "ReadVariableOp_1"
      control_output: "ReadVariableOp_2"
      control_output: "ReadVariableOp_3"
      control_output: "ReadVariableOp_4"
      control_output: "ReadVariableOp_5"
      control_output: "ReadVariableOp_6"
      control_output: "ReadVariableOp_7"
      control_output: "ReadVariableOp_8"
    }
    node_def {
      name: "ones_like/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "ones_like"
      op: "Fill"
      input: "ones_like/Shape:output:0"
      input: "ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "inputs"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "inputs"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "inputs"
      input: "ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "ReadVariableOp:value:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "mul:z:0"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "ReadVariableOp_1:value:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_1"
      op: "MatMul"
      input: "mul_1:z:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "ReadVariableOp_2:value:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_2"
      op: "MatMul"
      input: "mul_2:z:0"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "ReadVariableOp_3:value:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4"
      op: "StridedSlice"
      input: "ReadVariableOp_4:value:0"
      input: "strided_slice_4/stack:output:0"
      input: "strided_slice_4/stack_1:output:0"
      input: "strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_1"
      op: "BiasAdd"
      input: "MatMul_1:product:0"
      input: "strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5"
      op: "StridedSlice"
      input: "ReadVariableOp_5:value:0"
      input: "strided_slice_5/stack:output:0"
      input: "strided_slice_5/stack_1:output:0"
      input: "strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "BiasAdd_2"
      op: "BiasAdd"
      input: "MatMul_2:product:0"
      input: "strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_6"
      op: "StridedSlice"
      input: "ReadVariableOp_6:value:0"
      input: "strided_slice_6/stack:output:0"
      input: "strided_slice_6/stack_1:output:0"
      input: "strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_3"
      op: "MatMul"
      input: "states"
      input: "strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_7"
      op: "StridedSlice"
      input: "ReadVariableOp_7:value:0"
      input: "strided_slice_7/stack:output:0"
      input: "strided_slice_7/stack_1:output:0"
      input: "strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_4"
      op: "MatMul"
      input: "states"
      input: "strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "BiasAdd:output:0"
      input: "MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_3"
      op: "Mul"
      input: "add:z:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_1"
      op: "AddV2"
      input: "Mul_3:z:0"
      input: "Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum"
      op: "Minimum"
      input: "Add_1:z:0"
      input: "clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value"
      op: "Maximum"
      input: "clip_by_value/Minimum:z:0"
      input: "clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_2"
      op: "AddV2"
      input: "BiasAdd_1:output:0"
      input: "MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "Mul_4"
      op: "Mul"
      input: "add_2:z:0"
      input: "Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Add_3"
      op: "AddV2"
      input: "Mul_4:z:0"
      input: "Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1/Minimum"
      op: "Minimum"
      input: "Add_3:z:0"
      input: "clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value_1"
      op: "Maximum"
      input: "clip_by_value_1/Minimum:z:0"
      input: "clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_5"
      op: "Mul"
      input: "clip_by_value_1:z:0"
      input: "states"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_8"
      op: "StridedSlice"
      input: "ReadVariableOp_8:value:0"
      input: "strided_slice_8/stack:output:0"
      input: "strided_slice_8/stack_1:output:0"
      input: "strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "MatMul_5"
      op: "MatMul"
      input: "mul_5:z:0"
      input: "strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "add_4"
      op: "AddV2"
      input: "BiasAdd_2:output:0"
      input: "MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_6"
      op: "Mul"
      input: "clip_by_value:z:0"
      input: "states"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "sub/x:output:0"
      input: "clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul_7"
      op: "Mul"
      input: "sub:z:0"
      input: "add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "add_5"
      op: "AddV2"
      input: "mul_6:z:0"
      input: "mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^ReadVariableOp"
      input: "^ReadVariableOp_1"
      input: "^ReadVariableOp_2"
      input: "^ReadVariableOp_3"
      input: "^ReadVariableOp_4"
      input: "^ReadVariableOp_5"
      input: "^ReadVariableOp_6"
      input: "^ReadVariableOp_7"
      input: "^ReadVariableOp_8"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "add_5:z:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "ReadVariableOp"
      value: "ReadVariableOp"
    }
    control_ret {
      key: "ReadVariableOp_1"
      value: "ReadVariableOp_1"
    }
    control_ret {
      key: "ReadVariableOp_2"
      value: "ReadVariableOp_2"
    }
    control_ret {
      key: "ReadVariableOp_3"
      value: "ReadVariableOp_3"
    }
    control_ret {
      key: "ReadVariableOp_4"
      value: "ReadVariableOp_4"
    }
    control_ret {
      key: "ReadVariableOp_5"
      value: "ReadVariableOp_5"
    }
    control_ret {
      key: "ReadVariableOp_6"
      value: "ReadVariableOp_6"
    }
    control_ret {
      key: "ReadVariableOp_7"
      value: "ReadVariableOp_7"
    }
    control_ret {
      key: "ReadVariableOp_8"
      value: "ReadVariableOp_8"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "states"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_fn_877"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs_0"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_869"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_and_return_conditional_losses_2748"
      input_arg {
        name: "inputs_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_3_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_readvariableop_6_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "gru_cell/ReadVariableOp"
      control_output: "gru_cell/ReadVariableOp_1"
      control_output: "gru_cell/ReadVariableOp_2"
      control_output: "gru_cell/ReadVariableOp_3"
      control_output: "gru_cell/ReadVariableOp_4"
      control_output: "gru_cell/ReadVariableOp_5"
      control_output: "gru_cell/ReadVariableOp_6"
      control_output: "gru_cell/ReadVariableOp_7"
      control_output: "gru_cell/ReadVariableOp_8"
      control_output: "while"
    }
    node_def {
      name: "Shape"
      op: "Shape"
      input: "inputs_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "zeros/packed/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "zeros/packed"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "zeros/packed/1:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "zeros/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "zeros"
      op: "Fill"
      input: "zeros/packed:output:0"
      input: "zeros/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose"
      op: "Transpose"
      input: "inputs_0"
      input: "transpose/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Shape_1"
      op: "Shape"
      input: "transpose:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "TensorArrayV2/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2"
      op: "TensorListReserve"
      input: "TensorArrayV2/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\r\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayUnstack/TensorListFromTensor"
      op: "TensorListFromTensor"
      input: "transpose:y:0"
      input: "TensorArrayUnstack/TensorListFromTensor/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "transpose:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Shape"
      op: "Shape"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/ones_like"
      op: "Fill"
      input: "gru_cell/ones_like/Shape:output:0"
      input: "gru_cell/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "gru_cell/mul"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_1"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_2"
      op: "Mul"
      input: "strided_slice_2:output:0"
      input: "gru_cell/ones_like:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp:value:0"
      input: "gru_cell/strided_slice/stack:output:0"
      input: "gru_cell/strided_slice/stack_1:output:0"
      input: "gru_cell/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul"
      op: "MatMul"
      input: "gru_cell/mul:z:0"
      input: "gru_cell/strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_1"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_1:value:0"
      input: "gru_cell/strided_slice_1/stack:output:0"
      input: "gru_cell/strided_slice_1/stack_1:output:0"
      input: "gru_cell/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_1"
      op: "MatMul"
      input: "gru_cell/mul_1:z:0"
      input: "gru_cell/strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_2"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_2:value:0"
      input: "gru_cell/strided_slice_2/stack:output:0"
      input: "gru_cell/strided_slice_2/stack_1:output:0"
      input: "gru_cell/strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_2"
      op: "MatMul"
      input: "gru_cell/mul_2:z:0"
      input: "gru_cell/strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_3"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_3:value:0"
      input: "gru_cell/strided_slice_3/stack:output:0"
      input: "gru_cell/strided_slice_3/stack_1:output:0"
      input: "gru_cell/strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "gru_cell/MatMul:product:0"
      input: "gru_cell/strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 20
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_4"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_4:value:0"
      input: "gru_cell/strided_slice_4/stack:output:0"
      input: "gru_cell/strided_slice_4/stack_1:output:0"
      input: "gru_cell/strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "gru_cell/MatMul_1:product:0"
      input: "gru_cell/strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_3_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 40
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_5"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_5:value:0"
      input: "gru_cell/strided_slice_5/stack:output:0"
      input: "gru_cell/strided_slice_5/stack_1:output:0"
      input: "gru_cell/strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_2"
      op: "BiasAdd"
      input: "gru_cell/MatMul_2:product:0"
      input: "gru_cell/strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_6"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_6:value:0"
      input: "gru_cell/strided_slice_6/stack:output:0"
      input: "gru_cell/strided_slice_6/stack_1:output:0"
      input: "gru_cell/strided_slice_6/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_3"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_6:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_7"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_7:value:0"
      input: "gru_cell/strided_slice_7/stack:output:0"
      input: "gru_cell/strided_slice_7/stack_1:output:0"
      input: "gru_cell/strided_slice_7/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_4"
      op: "MatMul"
      input: "zeros:output:0"
      input: "gru_cell/strided_slice_7:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add"
      op: "AddV2"
      input: "gru_cell/BiasAdd:output:0"
      input: "gru_cell/MatMul_3:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_3"
      op: "Mul"
      input: "gru_cell/add:z:0"
      input: "gru_cell/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_1"
      op: "AddV2"
      input: "gru_cell/Mul_3:z:0"
      input: "gru_cell/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_1:z:0"
      input: "gru_cell/clip_by_value/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value"
      op: "Maximum"
      input: "gru_cell/clip_by_value/Minimum:z:0"
      input: "gru_cell/clip_by_value/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_2"
      op: "AddV2"
      input: "gru_cell/BiasAdd_1:output:0"
      input: "gru_cell/MatMul_4:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "gru_cell/Mul_4"
      op: "Mul"
      input: "gru_cell/add_2:z:0"
      input: "gru_cell/Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/Add_3"
      op: "AddV2"
      input: "gru_cell/Mul_4:z:0"
      input: "gru_cell/Const_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "gru_cell/Add_3:z:0"
      input: "gru_cell/clip_by_value_1/Minimum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/clip_by_value_1"
      op: "Maximum"
      input: "gru_cell/clip_by_value_1/Minimum:z:0"
      input: "gru_cell/clip_by_value_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_5"
      op: "Mul"
      input: "gru_cell/clip_by_value_1:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000(\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "gru_cell/strided_slice_8"
      op: "StridedSlice"
      input: "gru_cell/ReadVariableOp_8:value:0"
      input: "gru_cell/strided_slice_8/stack:output:0"
      input: "gru_cell/strided_slice_8/stack_1:output:0"
      input: "gru_cell/strided_slice_8/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "gru_cell/MatMul_5"
      op: "MatMul"
      input: "gru_cell/mul_5:z:0"
      input: "gru_cell/strided_slice_8:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "gru_cell/add_4"
      op: "AddV2"
      input: "gru_cell/BiasAdd_2:output:0"
      input: "gru_cell/MatMul_5:product:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_6"
      op: "Mul"
      input: "gru_cell/clip_by_value:z:0"
      input: "zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "gru_cell/sub"
      op: "Sub"
      input: "gru_cell/sub/x:output:0"
      input: "gru_cell/clip_by_value:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/mul_7"
      op: "Mul"
      input: "gru_cell/sub:z:0"
      input: "gru_cell/add_4:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "gru_cell/add_5"
      op: "AddV2"
      input: "gru_cell/mul_6:z:0"
      input: "gru_cell/mul_7:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2_1"
      op: "TensorListReserve"
      input: "TensorArrayV2_1/element_shape:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape_type"
        value {
          type: DT_INT32
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
        args {
          type_id: TFT_ARRAY
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_FLOAT
            }
          }
        }
      }
    }
    node_def {
      name: "time"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while/maximum_iterations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "while/loop_counter"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "while"
      op: "While"
      input: "while/loop_counter:output:0"
      input: "while/maximum_iterations:output:0"
      input: "time:output:0"
      input: "TensorArrayV2_1:handle:0"
      input: "zeros:output:0"
      input: "strided_slice_1:output:0"
      input: "TensorArrayUnstack/TensorListFromTensor:output_handle:0"
      input: "gru_cell_readvariableop_resource"
      input: "gru_cell_readvariableop_3_resource"
      input: "gru_cell_readvariableop_6_resource"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_VARIANT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_VARIANT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_num_original_outputs"
        value {
          i: 10
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 7
            i: 8
            i: 9
          }
        }
      }
      attr {
        key: "_stateful_parallelism"
        value {
          b: false
        }
      }
      attr {
        key: "body"
        value {
          func {
            name: "__inference_while_body_470190_2609"
          }
        }
      }
      attr {
        key: "cond"
        value {
          func {
            name: "__inference_while_cond_470189_451"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorArrayV2Stack/TensorListStack"
      op: "TensorListStack"
      input: "while:output:3"
      input: "TensorArrayV2Stack/TensorListStack/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_elements"
        value {
          i: -1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "transpose_1/perm"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "transpose_1"
      op: "Transpose"
      input: "TensorArrayV2Stack/TensorListStack:tensor:0"
      input: "transpose_1/perm:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^gru_cell/ReadVariableOp"
      input: "^gru_cell/ReadVariableOp_1"
      input: "^gru_cell/ReadVariableOp_2"
      input: "^gru_cell/ReadVariableOp_3"
      input: "^gru_cell/ReadVariableOp_4"
      input: "^gru_cell/ReadVariableOp_5"
      input: "^gru_cell/ReadVariableOp_6"
      input: "^gru_cell/ReadVariableOp_7"
      input: "^gru_cell/ReadVariableOp_8"
      input: "^while"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "gru_cell/ReadVariableOp"
      value: "gru_cell/ReadVariableOp"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_1"
      value: "gru_cell/ReadVariableOp_1"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_2"
      value: "gru_cell/ReadVariableOp_2"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_3"
      value: "gru_cell/ReadVariableOp_3"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_4"
      value: "gru_cell/ReadVariableOp_4"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_5"
      value: "gru_cell/ReadVariableOp_5"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_6"
      value: "gru_cell/ReadVariableOp_6"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_7"
      value: "gru_cell/ReadVariableOp_7"
    }
    control_ret {
      key: "gru_cell/ReadVariableOp_8"
      value: "gru_cell/ReadVariableOp_8"
    }
    control_ret {
      key: "while"
      value: "while"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs/0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_layer_call_fn_2458"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "unknown"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "unknown_1"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "unknown"
      input: "unknown_0"
      input: "unknown_1"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0002\002J\0008\001\202\001\000"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_net_layer_call_and_return_conditional_losses_2450"
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^StatefulPartitionedCall"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 29
                }
                dim {
                  size: 13
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_net_while_cond_469542_437"
      input_arg {
        name: "net_while_net_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_net_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "net_while_less_net_strided_slice_1"
        type: DT_INT32
      }
      input_arg {
        name: "net_while_net_while_cond_469542___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "net_while_net_while_cond_469542___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_net_while_cond_469542___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "net_while_net_while_cond_469542___redundant_placeholder3"
        type: DT_RESOURCE
      }
      output_arg {
        name: "net_while_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "net/while/Less"
      op: "Less"
      input: "net_while_placeholder"
      input: "net_while_less_net_strided_slice_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "net/while/Identity"
      op: "Identity"
      input: "net/while/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    ret {
      key: "net_while_identity"
      value: "net/while/Identity:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 987
  min_consumer: 12
}
